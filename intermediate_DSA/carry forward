Q1. Special Subsequences "AG"

Problem Description
You have given a string A having Uppercase English letters.
You have to find how many times subsequence "AG" is there in the given string.
NOTE: Return the answer modulo 109 + 7 as the answer can be very large.

Problem Constraints
1 <= length(A) <= 105

Input Format
First and only argument is a string A.

Output Format
Return an integer denoting the answer.

Example Input
Input 1:
A = "ABCGAG"
Input 2:
A = "GAB"

Example Output
Output 1:
3
Output 2:
0

Example Explanation
Explanation 1:
Subsequence "AG" is 3 times in given string 
Explanation 2:
There is no subsequence "AG" in the given string.

Solution -

class Solution:
    # @param A : string
    # @return an integer
    def solve(self, A):
        n = len(A)
        c = 0
        ans = 0
        for i in range(n-1,-1,-1):
            if A[i] == 'G':
                c+=1
            elif A[i] == 'A':
                ans = ans+c 
                ans = ans % 1000000007

        return ans        

#########################################################################################################################

Q2. Closest MinMax

Problem Description
Given an array A, find the size of the smallest subarray such that it contains at least one occurrence of the maximum value of the array
and at least one occurrence of the minimum value of the array.

Problem Constraints
1 <= |A| <= 2000

Input Format
First and only argument is vector A

Output Format
Return the length of the smallest subarray which has at least one occurrence of minimum and maximum element of the array

Example Input
Input 1:
A = [1, 3, 2]
Input 2:
A = [2, 6, 1, 6, 9]

Example Output
Output 1:
2
Output 2:
3

Example Explanation
Explanation 1:
Take the 1st and 2nd elements as they are the minimum and maximum elements respectievly.
Explanation 2:
Take the last 3 elements of the array.

Solution -

class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        max_v = max(A)
        min_v = min(A)
        min_i = -1
        max_i = -1
        ans = len(A)
        if max_v == min_v:
            return 1
        for i in range(len(A)-1,-1,-1):
            if A[i] == min_v:
                min_i = i
                if max_i != -1:
                    leng = max_i - min_i+1
                    ans = min(ans,leng)
            if A[i] == max_v:
                max_i = i
                if min_i != -1:
                    leng = min_i - max_i+1
                    ans = min(ans,leng) 
        return ans            

#########################################################################################################################

Q3. Bulbs

Problem Description
A wire connects N light bulbs.
Each bulb has a switch associated with it; however, due to faulty wiring, a switch also changes the state of all the bulbs to the right of the current bulb.
Given an initial state of all bulbs, find the minimum number of switches you have to press to turn on all the bulbs.
You can press the same switch multiple times.
Note: 0 represents the bulb is off and 1 represents the bulb is on.

Problem Constraints
0 <= N <= 5Ã—105
0 <= A[i] <= 1

Input Format
The first and the only argument contains an integer array A, of size N.

Output Format
Return an integer representing the minimum number of switches required.

Example Input
Input 1:
A = [0, 1, 0, 1]
Input 2:
A = [1, 1, 1, 1]

Example Output
Output 1:
4
Output 2:
0

Example Explanation
Explanation 1:
press switch 0 : [1 0 1 0]
press switch 1 : [1 1 0 1]
press switch 2 : [1 1 1 0]
press switch 3 : [1 1 1 1]
Explanation 2:
There is no need to turn any switches as all the bulbs are already on.

Solution -
              
class Solution:
	# @param A : list of integers
	# @return an integer
	def bulbs(self, A):
        n = len(A)
        c = 0
        for i in range(n):
            if ((A[i] == 0) & (c&1 == 0)) | ((A[i] == 1) & (c&1 == 1)):
                c+=1
        return c

#########################################################################################################################

Q4. Amazing Subarrays

You are given a string S, and you have to find all the amazing substrings of S.
An amazing Substring is one that starts with a vowel (a, e, i, o, u, A, E, I, O, U).

Input
Only argument given is string S.

Output
Return a single integer X mod 10003, here X is the number of Amazing Substrings in given the string.

Constraints
1 <= length(S) <= 1e6
S can have special characters

Example
Input
ABEC

Output
6

Explanation
Amazing substrings of given string are :
1. A
2. AB
3. ABE
4. ABEC
5. E
6. EC
here number of substrings are 6 and 6 % 10003 = 6.

Solution -

class Solution:
    # @param A : string
    # @return an integer
    def solve(self, A):
        n = len(A)
        c = 0
        for i in range(n):
            if (A[i].upper() =='A') | (A[i].upper() == 'E') | (A[i].upper() == 'I') | (A[i].upper() == 'O') | (A[i].upper() == 'U'):
                c = c + (n-i)
        return c%10003 

#########################################################################################################################

Q5. Even Subarrays

Problem Description
You are given an integer array A.
Decide whether it is possible to divide the array into one or more subarrays of even length such that the first and last element of all subarrays will be even.
Return "YES" if it is possible; otherwise, return "NO" (without quotes).

Problem Constraints
1 <= |A|, A[i] <= 106

Input Format
The first and the only input argument is an integer array, A.

Output Format
Return a string "YES" or "NO" denoting the answer.

Example Input
Input 1:
A = [2, 4, 8, 6]
Input 2:
A = [2, 4, 8, 7, 6]

Example Output
Output 1:
"YES"
Output 2:
"NO"

Example Explanation
Explanation 1:
We can divide A into [2, 4] and [8, 6].
Explanation 2:
There is no way to divide the array into even length subarrays.

Solution -

class Solution:
    # @param A : list of integers
    # @return a strings
    def solve(self, A):
        n = len(A)
        if n%2 == 1:
            return "NO"

        if (A[0]%2 == 1) | (A[n-1]%2 == 1):
            return "NO"
               
        if (A[0]%2 == 0 ) &(A[n-1]%2 == 0):
            return "YES"

#########################################################################################################################

Q6. Leaders in an array

Problem Description
Given an integer array A containing N distinct integers, you have to find all the leaders in array A. An element is a leader if it is strictly greater than all the elements to its right side.
NOTE: The rightmost element is always a leader.

Problem Constraints
1 <= N <= 105
1 <= A[i] <= 108

Input Format
There is a single input argument which a integer array A

Output Format
Return an integer array denoting all the leader elements of the array.

Example Input
Input 1:
A = [16, 17, 4, 3, 5, 2]
Input 2:
A = [5, 4]

Example Output
Output 1:
[17, 2, 5]
Output 2:
[5, 4]

Example Explanation
Explanation 1:
Element 17 is strictly greater than all the elements on the right side to it.
Element 2 is strictly greater than all the elements on the right side to it.
Element 5 is strictly greater than all the elements on the right side to it.
So we will return these three elements i.e [17, 2, 5], we can also return [2, 5, 17] or [5, 2, 17] or any other ordering.
Explanation 2:
Element 5 is strictly greater than all the elements on the right side to it.
Element 4 is strictly greater than all the elements on the right side to it.
So we will return these two elements i.e [5, 4], we can also any other ordering.

Solution -

class Solution:
    # @param A : list of integers
    # @return a list of integers
    def solve(self, A):
        n = len(A)
        max_val = A[n-1]
        l = []
        l.append(max_val)
        for i in range(n-2,-1,-1):
            if A[i]>max_val:
                l.append(A[i])
                max_val = A[i]
        return l
