Q1. Check Palindrome using Recursion

Problem Description
Write a recursive function that checks whether string A is a palindrome or Not.
Return 1 if the string A is a palindrome, else return 0.
Note: A palindrome is a string that's the same when read forward and backward.

Problem Constraints
1 <= |A| <= 50000
String A consists only of lowercase letters.

Input Format
The first and only argument is a string A.

Output Format
Return 1 if the string A is a palindrome, else return 0.

Example Input
Input 1:
A = "naman"
Input 2:
A = "strings"

Example Output
Output 1:
1
Output 2:
0

Example Explanation
Explanation 1:
"naman" is a palindomic string, so return 1.
Explanation 2:
"strings" is not a palindrome, so return 0.

Solution -

import sys
sys.setrecursionlimit(10**6)
def palindrome(A,start,end):
    if start>=end:
        return 1
    if A[start]==A[end]:
        return palindrome(A,start+1,end-1)
    return 0

class Solution:
    # @param A : string
    # @return an integer
    def solve(self, A):
        start=0
        end=len(A)-1
        return palindrome(A,start,end)

#######################################################################################################################

Q2. Find Fibonacci - II

Problem Description
The Fibonacci numbers are the numbers in the following integer sequence.
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ……..
In mathematical terms, the sequence Fn of Fibonacci numbers is defined by the recurrence relation:
Fn = Fn-1 + Fn-2
Given a number A, find and return the Ath Fibonacci Number using recursion.
Given that F0 = 0 and F1 = 1.

Problem Constraints
0 <= A <= 20

Input Format
First and only argument is an integer A.

Output Format
Return an integer denoting the Ath term of the sequence.

Example Input
Input 1:
A = 2
Input 2:
A = 9

Example Output
Output 1:
1
Output 2:
34

Example Explanation
Explanation 1:
f(2) = f(1) + f(0) = 1
Explanation 2:
f(9) = f(8) + f(7) = 21 + 13  = 34

Solution -

class Solution:
    # @param A : integer
    # @return an integer
    def findAthFibonacci(self, A):
        if (A == 0):
            return 0
        if A == 1 or A == 2:
            return 1    
        return Solution.findAthFibonacci(self,A-1)+Solution.findAthFibonacci(self,A-2)

#######################################################################################################################

Q3. Find Factorial!

Problem Description
Write a program to find the factorial of the given number A using recursion.
Note: The factorial of a number N is defined as the product of the numbers from 1 to N.

Problem Constraints
0 <= A <= 12

Input Format
First and only argument is an integer A.

Output Format
Return an integer denoting the factorial of the number A.

Example Input
Input 1:
A = 4
Input 2:
A = 1

Example Output
Output 1:
24
Output 2:
1

Example Explanation
Explanation 1:
Factorial of 4 = 4 * 3 * 2 * 1 = 24
Explanation 2:
Factorial of 1 = 1

Solution -

class Solution:
    # @param A : integer
    # @return an integer
    def solve(self, A):
        if A == 0 or A == 1:
            return 1
        return Solution.solve(self,A-1)*A    

#######################################################################################################################

Q4. Print reverse string

Problem Description
Write a recursive function that takes a string, S, as input and prints the characters of S in reverse order.

Problem Constraints
1 <= |s| <= 1000

Input Format
First line of input contains a string S.

Output Format
Print the character of the string S in reverse order.

Example Input
Input 1:
scaleracademy
Input 2:
cool

Example Output
Output 1:
ymedacarelacs
Output 2:
looc

Solution -

import sys
sys.setrecursionlimit(10**6)
def rever(A,s,e):
    if e<=s:
        return A[s]
    print(A[e],end="")    
    return rever(A,s,e-1)
   
def main():
    A = input()
    n = len(A)
    s = 0
    e = n-1
    print(rever(A,s,e))
    return 0

if __name__ == '__main__':
    main()

#######################################################################################################################

Q5. Sum of Digits!

Problem Description
Given a number A, we need to find the sum of its digits using recursion.

Problem Constraints
1 <= A <= 109

Input Format
The first and only argument is an integer A.

Output Format
Return an integer denoting the sum of digits of the number A.

Example Input
Input 1:
A = 46
Input 2:
A = 11

Example Output
Output 1:
10
Output 2:
2

Example Explanation
Explanation 1:
Sum of digits of 46 = 4 + 6 = 10
Explanation 2:
Sum of digits of 11 = 1 + 1 = 2

Solution -

class Solution:
    # @param A : integer
    # @return an integer
    def solve(self, A):
        if A == 0:
            return 0
        return (A % 10 + Solution.solve(self,int(A / 10)))

#######################################################################################################################

Q6. Implement Power Function

Problem Description
Implement pow(A, B) % C.
In other words, given A, B and C, Find (AB % C).
Note: The remainders on division cannot be negative. In other words, make sure the answer you return is non-negative.

Problem Constraints
-109 <= A <= 109
0 <= B <= 109
1 <= C <= 109

Input Format
Given three integers A, B, C.

Output Format
Return an integer.

Example Input
Input 1:
A = 2
B = 3
C = 3
Input 2:
A = 3
B = 3
C = 1

Example Output
Output 1:
2
Output 2:
0

Example Explanation
Explanation 1:
23 % 3 = 8 % 3 = 2
Explanation 2:
33 % 1 = 27 % 1 = 0

Solution -

class Solution:
    # @param A : integer
    # @param B : integer
    # @param C : integer
    # @return an integer
    def pow(self, A, B, C):
        if A == 0 and B == 0:
            return 0
        if A > 0 and B == 0:
            return 1
        return ((A%C)*(pow(A,B-1,C))%C)%C

#######################################################################################################################

Q7. Sum of Digits!

Problem Description
Given a number A, we need to find the sum of its digits using recursion.

Problem Constraints
1 <= A <= 109

Input Format
The first and only argument is an integer A.

Output Format
Return an integer denoting the sum of digits of the number A.

Example Input
Input 1:
A = 46
Input 2:
A = 11

Example Output
Output 1:
10
Output 2:
2

Example Explanation
Explanation 1:
Sum of digits of 46 = 4 + 6 = 10
Explanation 2:
Sum of digits of 11 = 1 + 1 = 2

class Solution:
    # @param A : integer
    # @return an integer
    def solve(self, A):
        if A % 10 == A:
            return A

        return A%10+Solution.solve(self,A//10)    

#######################################################################################################################

Q8. Is magic?

Problem Description
Given a number A, check if it is a magic number or not.
A number is said to be a magic number if the sum of its digits is calculated till a single digit recursively by adding the sum of the digits after every addition. If the single digit comes out to be 1, then the number is a magic number.

Problem Constraints
1 <= A <= 109

Input Format
The first and only argument is an integer A.

Output Format
Return an 1 if the given number is magic else return 0.

Example Input
Input 1:
A = 83557
Input 2:
A = 1291

Example Output
Output 1:
1
Output 2:
0

Example Explanation
Explanation 1:
Sum of digits of (83557) = 28
Sum of digits of (28) = 10
Sum of digits of (10) = 1. 
Single digit is 1, so it's a magic number. Return 1.
Explanation 2:
Sum of digits of (1291) = 13
Sum of digits of (13) = 4
Single digit is not 1, so it's not a magic number. Return 0.

Solution -

class Solution:
    # @param A : integer
    # @return an integer

    def solve(self, A):
        if A %9 == 1:
            return 1
        return 0

#######################################################################################################################

Q9. Kth Symbol

Problem Description
On the first row, we write a 0. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10.
Given row number A and index B, return the Bth indexed symbol in row A. (The values of B are 1-indexed.).

Problem Constraints
1 <= A <= 20
1 <= B <= 2A - 1

Input Format
First argument is an integer A.
Second argument is an integer B.

Output Format
Return an integer denoting the Bth indexed symbol in row A.

Example Input
Input 1:
A = 2
B = 1
Input 2:
A = 2
B = 2

Example Output
Output 1:
0
Output 2:
1

Example Explanation
Explanation 1:
Row 1: 0
Row 2: 01
Explanation 2:
Row 1: 0
Row 2: 01

Solution -

class Solution:
    # @param A : integer
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        if A==1:
            return 0
        mid= pow(2,A-1)//2
        if B<=mid:
            return self.solve(A-1,B)
        else:
            return 1-self.solve(A-1,B-mid)

#######################################################################################################################

Q10. Gray Code

Problem Description
The gray code is a binary numeral system where two successive values differ in only one bit.
Given a non-negative integer A representing the total number of bits in the code, print the sequence of gray code.
A gray code sequence must begin with 0.

Problem Constraints
1 <= A <= 16

Input Format
The first argument is an integer A.

Output Format
Return an array of integers representing the gray code sequence.

Example Input
Input 1:
A = 2
Input 1:
A = 1

Example Output
output 1:
[0, 1, 3, 2]
output 2:
[0, 1]

Example Explanation
Explanation 1:
for A = 2 the gray code sequence is:
00 - 0
01 - 1
11 - 3
10 - 2
So, return [0,1,3,2].
Explanation 1:
for A = 1 the gray code sequence is:
00 - 0
01 - 1
So, return [0, 1].

Solution -

class Solution:
    # @param A : integer
    # @return a list of integers
    def grayCode(self, A):
        if A == 1 :
            base = []
            base.append(0)
            base.append(1)
            return base
        rres = self.grayCode(A-1)
        mres = []
        for i in range(0, len(rres)) :
            mres.append(rres[i])
        for i in range(len(rres)-1, -1, -1) :
            mres.append(2**(A-1) + rres[i])
        return mres
