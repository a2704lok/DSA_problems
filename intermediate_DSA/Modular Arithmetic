Q1. Excel Column Number

Problem Description
Given a column title as appears in an Excel sheet, return its corresponding column number.

Problem Constraints
1 <= length of the column title <= 5

Input Format
The only argument is a string that represents the column title in the excel sheet.

Output Format
Return a single integer that represents the corresponding column number.

Example Input
Input 1:
AB
Input 2:
BB

Example Output
Output 1:
28
Output 2:
54

Example Explanation
Explanation 1:
A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28
Explanation 2:
A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28
...
AZ -> 52
BA -> 53
BB -> 54

Solution - 

class Solution:
	# @param A : string
	# @return an integer
	def titleToNumber(self, A):
        res = 0
        for i in range(len(A)):
            res = res*26
            res = res+((ord(A[i])-64))
        return res

########################################################################################################################

Q2. A, B and Modulo

Problem Description
Given two integers A and B, find the greatest possible positive integer M, such that A % M = B % M.

Problem Constraints
1 <= A, B <= 109
A != B

Input Format
The first argument is an integer A.
The second argument is an integer B.

Output Format
Return an integer denoting the greatest possible positive M.

Example Input
Input 1:
A = 1
B = 2
Input 2:
A = 5
B = 10

Example Output
Output 1:
1
Output 2:
5

Example Explanation
Explanation 1:
1 is the largest value of M such that A % M == B % M.
Explanation 2:
For M = 5, A % M = 0 and B % M = 0.
No value greater than M = 5, satisfies the condition.

Solution -

class Solution:
    # @param A : integer
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        return abs(B-A)

########################################################################################################################

Q3. Divisibility by 8

Problem Description
You are given a number A in the form of a string. Check if the number is divisible by eight or not.
Return 1 if it is divisible by eight else, return 0.

Problem Constraints
1 <= length of the String <= 100000
'0' <= A[i] <= '9'

Input Format
The only argument given is a string A.

Output Format
Return 1 if it is divisible by eight else return 0.

Example Input
Input 1:
A = "16"
Input 2:
A = "123"

Example Output
Output 1:
1
Output 2:
0

Example Explanation
Explanation 1:
16 = 8 * 2
Explanation 2:
123 = 15 * 8 + 3

Solution -

class Solution:
    # @param A : string
    # @return an integer
    def solve(self, A):
        A = int(A[-3:])
        if A%8 == 0:
            return 1
        return 0    

########################################################################################################################

Q4. Mod String

Problem Description
You are given a large number in the form of a string A where each character denotes a digit of the number.
You are also given a number B. You have to find out the value of A % B and return it.

Problem Constraints
1 <= A.length() <= 105
0 <= Ai <= 9
1 <= B <= 109

Input Format
The first argument is a string A.
The second argument is an integer B.

Output Format
Return a single integer denoting the value of A % B.

Example Input
Input 1:
A = "143"
B = 2
Input 2:
A = "43535321"
B = 47

Example Output
Output 1:
1
Output 2:
20

Example Explanation
Explanation 1:
143 is an odd number so 143 % 2 = 1.
Explanation 2:
43535321 % 47 = 20

Solution -

class Solution:
    # @param A : string
    # @param B : integer
    # @return an integer
    def findMod(self, A, B):
        return (int(A)%B)

########################################################################################################################

Q5. Repeat and Missing Number Array

There are certain problems which are asked in the interview to also check how you take care of overflows in your problem.
This is one of those problems.
Please take extra care to make sure that you are type-casting your ints to long properly and at all places. Try to verify if your solution works if number of elements is as large as 105
Food for thought :
Even though it might not be required in this problem, in some cases, you might be required to order the operations cleverly so that the numbers do not overflow.
For example, if you need to calculate n! / k! where n! is factorial(n), one approach is to calculate factorial(n), factorial(k) and then divide them.
Another approach is to only multiple numbers from k + 1 ... n to calculate the result.
Obviously approach 1 is more susceptible to overflows.
You are given a read only array of n integers from 1 to n.
Each integer appears exactly once except A which appears twice and B which is missing.
Return A and B.
Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
Note that in your output A should precede B.

Example:
Input:[3 1 2 5 3] 
Output:[3, 4] 

A = 3, B = 4

Solution -

class Solution:
    # @param A : tuple of integers
    # @return a list of integers
    def repeatedNumber(self, A):
        n = len(A)
        C = []
        s = n*(n+1)//2
        s_ = 0
        s2 = n*(n+1)*(2*n + 1)//6
        s2_ = 0
        for i in range(n):
            s_ += A[i]
            s2_ += (A[i]**2)

        d = (s2_ - s2)//(s_ - s)
        c = (s_ - s) + d
        x = c//2
        y = d - x
        C.append(x)
        C.append(y)

        return C

########################################################################################################################

Q6. Concatenate Three Numbers

Problem Description
Given three 2-digit integers, A, B, and C, find out the minimum number obtained by concatenating them in any order.
Return the minimum result obtained.

Problem Constraints
10 <= A, B, C <= 99

Input Format
The first argument of input contains an integer, A.
The second argument of input contains an integer, B.
The third argument of input contains an integer, C.

Output Format
Return an integer representing the answer.

Example Input
Input 1:
A = 10
B = 20
C = 30
Input 2:
A = 55
B = 43
C = 47 

Example Output
Output 1:
102030 
Output 2:
434755

Example Explanation
Explanation 1:
10 + 20 + 30 = 102030 
Explanation 2:
43 + 47 + 55 = 434755 

Solution -

class Solution:
    # @param A : integer
    # @param B : integer
    # @param C : integer
    # @return an integer
    def solve(self, A, B, C):
        l = [A,B,C]
        l.sort()
        return int(str(l[0])+str(l[1])+str(l[2]))    

########################################################################################################################

Q7. Find if two rectangles overlap

Problem Description
Eight integers A, B, C, D, E, F, G, and H represent two rectangles in a 2D plane.
For the First rectangle,
Bottom left corner is (A, B)
Top right corner is (C, D)
For the Second rectangle,
Bottom left corner is (E, F)
Top right corner is (G, H).
Find and return whether the two rectangles overlap or not.

Problem Constraints
-104 <= A < C <= 104
-104 <= B < D <= 104
-104 <= E < G <= 104
-104 <= F < H <= 104

Input Format
The eight arguments are integers A, B, C, D, E, F, G, and H.

Output Format
Return 1 if the two rectangles overlap else, return 0.

Example Input
Input 1:
A = 0   B = 0
C = 4   D = 4
E = 2   F = 2
G = 6   H = 6
Input 2:
A = 0   B = 0
C = 1   D = 1
E = 2   F = 2
G = 3   H = 3

Example Output
Output 1:
1
Output 2:
0

Example Explanation
Explanation 1:
Rectangle with bottom left (2, 2) and top right (4, 4) is overlapping.
Explanation 2:
There is no Overlapping found.

Solution -

class Solution:
    # @param A : integer
    # @param B : integer
    # @param C : integer
    # @param D : integer
    # @param E : integer
    # @param F : integer
    # @param G : integer
    # @param H : integer
    # @return an integer
    def solve(self, A, B, C, D, E, F, G, H):
        if(E>=C or A>=G):
            return 0
        if(B>=H or F>=D):
            return 0
    
        return 1
    
########################################################################################################################

Q8. Leap year? - III

Problem Description
Given an integer A representing a year, Return 1 if it is a leap year else, return 0.
A year is a leap year if the following conditions are satisfied:
The year is multiple of 400.
or the year is multiple of 4 and not multiple of 100.

Problem Constraints
1 <= A <= 109

Input Format
First and only argument is an integer A

Output Format
Return 1 if it is a leap year else return 0

Example Input
Input 1
A = 2020
Input 2:
A = 1999

Example Output
Output 1
1
Output 2:
0

Example Explanation
Explanation 1
2020 is a leap year. 
2020 is not a multiple of 400 but it is divisible by 4 and also at the same time not divisible by 100.
Explanation 2:
1999 is not a leap year.
199 is not a multiple of 400. It is not divisible by 4 and also at the same time not divisible by 100.
All the conditions fail.

Solution -

class Solution:
    # @param A : integer
    # @return an integer
    def solve(self, A):
        ans = 0
        if (A % 400 == 0) and (A % 100 == 0):
            ans =  1
        elif (A % 4 ==0) and (A % 100 != 0):
            ans = 1
        return ans

########################################################################################################################

Q9. Least Common Multiple

Problem Description
Write a program to input an integer T and then for each test case input two integers A and B in two different lines and then print T lines containing Least Common Multiple (LCM) of two given 2 numbers A and B.
Note: LCM of two integers is the smallest positive integer divisible by both.

Problem Constraints
1 <= T <= 1000
1 <= A,B <= 1000

Input Format
The first line contains T which means number of test cases.
Next 2T lines contains input A and B for each testcase.
First line of each testcase contain an integer A and second line of the testcase contains input B.

Output Format
T lines each containing an integer representing LCM of A & B.

Example Input
Input 1:
3
2
3
9
6
2
6

Example Output
Output 1:
6
18
6

Solution -

n = int(input())

for i in range(n):
    a = int(input())
    b = int(input())
    if a > b:
       greater = a
    else:
       greater = b

    while(True):
       if((greater % a == 0) and (greater % b == 0)):
           lcm = greater
           break
       greater += 1

    print(lcm)
