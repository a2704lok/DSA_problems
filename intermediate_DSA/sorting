Q1. Sort by Color

Problem Description
Given an array with N objects colored red, white, or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
We will represent the colors as,
red -> 0
white -> 1
blue -> 2
Note: Using the library sort function is not allowed.

Problem Constraints
1 <= N <= 1000000
0 <= A[i] <= 2

Input Format
First and only argument of input contains an integer array A.

Output Format
Return an integer array in asked order

Example Input
Input 1 :
A = [0, 1, 2, 0, 1, 2]
Input 2:
A = [0]

Example Output
Output 1:
[0, 0, 1, 1, 2, 2]
Output 2:
[0]

Example Explanation
Explanation 1:
[0, 0, 1, 1, 2, 2] is the required order.
Explanation 2:
[0] is the required order

Solution -

class Solution:
    # @param A : list of integers
    # @return A after the sort
    def sortColors(self, A):
        n = len(A)
        i = 0
        j = n - 1
        k = n - 1
        while i < k:
            if A[i] == 0:
                i += 1
            elif A[i] == 1:
                if i < j:
                    A[i],A[j] = A[j],A[i]
                    j-=1
                else:
                    i+= 1
            else:
                A[i],A[k] = A[k],A[i]
                k -= 1
                if j > k:
                    j = k
        return A

#####################################################################################################################

Q2. Noble Integer

Problem Description
Given an integer array A, find if an integer p exists in the array such that the number of integers greater than p in the array equals p.

Problem Constraints
1 <= |A| <= 2*105
-108 <= A[i] <= 108

Input Format
First and only argument is an integer array A.

Output Format
Return 1 if any such integer p is present else, return -1.

Example Input
Input 1:
A = [3, 2, 1, 3]
Input 2:
A = [1, 1, 3, 3]

Example Output
Output 1:
1
Output 2:
-1

Example Explanation
Explanation 1:
For integer 2, there are 2 greater elements in the array..
Explanation 2:
There exist no integer satisfying the required conditions.

Solution -

class Solution:
	# @param A : list of integers
	# @return an integer
	def solve(self, A):
        n = len(A)
        A.sort(reverse = True)
        c = 0
        if A[0] == 0:
            return 1
        for i in range(1,n):
            if A[i] != A[i-1]:
                c = i
            if A[i] == c:
                return 1
        return -1

#####################################################################################################################

Q3. Arithmetic Progression?

Problem Description
Given an integer array A of size N. Return 1 if the array can be arranged to form an arithmetic progression, otherwise return 0.
A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.

Problem Constraints
2 <= N <= 105
-109 <= A[i] <= 109

Input Format
The first and only argument is an integer array A of size N.

Output Format
Return 1 if the array can be rearranged to form an arithmetic progression, otherwise return 0.

Example Input
Input 1:
A = [3, 5, 1]
Input 2:
A = [2, 4, 1]

Example Output
Output 1:
1
Output 2:
0

Example Explanation
Explanation 1:
We can reorder the elements as [1, 3, 5] or [5, 3, 1] with differences 2 and -2 respectively, between each consecutive elements.
Explanation 2:
There is no way to reorder the elements to obtain an arithmetic progression.

Solution -

class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        A.sort()
        l = []
        diff = None
        for i in range(len(A)-1):
            l.append(A[i+1]-A[i])
        
        if len(list(set(l))) != 1:
            return 0
        return 1

#####################################################################################################################

Q4. Largest Number

Problem Description
Given an array A of non-negative integers, arrange them such that they form the largest number.
Note: The result may be very large, so you need to return a string instead of an integer.

Problem Constraints
1 <= len(A) <= 100000
0 <= A[i] <= 2*109

Input Format
The first argument is an array of integers.

Output Format
Return a string representing the largest number.

Example Input
Input 1:
A = [3, 30, 34, 5, 9]
Input 2:
A = [2, 3, 9, 0]

Example Output
Output 1:
"9534330"
Output 2:
"9320"

Example Explanation
Explanation 1:
Reorder the numbers to [9, 5, 34, 3, 30] to form the largest number.
Explanation 2:
Reorder the numbers to [9, 3, 2, 0] to form the largest number 9320.

Solution -

from functools import cmp_to_key

class Solution:
    # @param A : tuple of integers
    # @return a strings
    def LargerNumKey(x,y):
        if x+y > y+x:
            return -1
        elif x+y < y+x:
            return 1
        else: 
            return 0
        # return x+y > y+x

    def largestNumber(self, A):
        if len(set(A)) == 1 and A[0] == 0:
            return "0"
        a_s = []
        for i in A:
            a_s.append(str(i))
        
        a_s.sort(key = cmp_to_key(Solution.LargerNumKey))

        ans = "".join(a_s)
        return ans

#####################################################################################################################

Q5. Elements Removal

Problem Description
Given an integer array A of size N. You can remove any element from the array in one operation.
The cost of this operation is the sum of all elements in the array present before this operation.
Find the minimum cost to remove all elements from the array.

Problem Constraints
0 <= N <= 1000
1 <= A[i] <= 103

Input Format
First and only argument is an integer array A.

Output Format
Return an integer denoting the total cost of removing all elements from the array.

Example Input
Input 1:
A = [2, 1]
Input 2:
A = [5]

Example Output
Output 1:
4
Output 2:
5

Example Explanation
Explanation 1:
Given array A = [2, 1]
Remove 2 from the array => [1]. Cost of this operation is (2 + 1) = 3.
Remove 1 from the array => []. Cost of this operation is (1) = 1.
So, total cost is = 3 + 1 = 4.
Explanation 2:
There is only one element in the array. So, cost of removing is 5.

Solution - 

class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        A.sort(reverse = True)
        summ = 0
        for i in range(len(A)):
            summ += A[i]*(i+1)
        return summ
