Q1. Rain Water Trapped

Problem Description
Imagine a histogram where the bars' heights are given by the array A. Each bar is of uniform width, which is 1 unit. When it rains, water will accumulate in the valleys between the bars.
Your task is to calculate the total amount of water that can be trapped in these valleys.

Example:
The Array A = [5, 4, 1, 4, 3, 2, 7] is visualized as below. The total amount of rain water trapped in A is 11.

Rain Water Trapped
*image

Problem Constraints
1 <= |A| <= 105
0 <= A[i] <= 105

Input Format
First and only argument is the Integer Array, A.

Output Format
Return an Integer, denoting the total amount of water that can be trapped in these valleys

Example Input
Input 1:
A = [0, 1, 0, 2]
Input 2:
A = [1, 2]

Example Output
Output 1:
1
Output 2:
0

Example Explanation
Explanation 1:
1 unit is trapped on top of the 3rd element.
Rain Water Histogram
Explanation 2:
No water is trapped.

Solution -

class Solution:
	# @param A : tuple of integers
	# @return an integer
	def trap(self, A):
        pfm = []
        pfm.append(A[0])
        m = A[0]
        for i in range(1,len(A)):
            if A[i] > m:
                pfm.append(A[i])
                m = A[i]
            else:
                pfm.append(m)

        sfm = []
        sfm.append(A[-1])
        m = A[-1]
        for i in range(len(A)-2,-1,-1):
            if A[i] > m:
                sfm.append(A[i])
                m = A[i]
            else:
                sfm.append(m)

        sfm = sfm[::-1]        

		trap_w = 0
		vol = 0
		for i in range(1,len(A)-1):
			leftmax = pfm[i]
			rightmax = sfm[i+1]
			reqmin = min(leftmax,rightmax)
			vol = reqmin - A[i]
			if vol > 0:
				trap_w += vol
        return trap_w

#######################################################################################################################

Q2. Max Sum Contiguous Subarray

Problem Description
Find the maximum sum of contiguous non-empty subarray within an array A of length N.

Problem Constraints
1 <= N <= 1e6
-1000 <= A[i] <= 1000

Input Format
The first and the only argument contains an integer array, A.

Output Format
Return an integer representing the maximum possible sum of the contiguous subarray.

Example Input
Input 1:
A = [1, 2, 3, 4, -10] 
Input 2:
A = [-2, 1, -3, 4, -1, 2, 1, -5, 4] 

Example Output
Output 1:
10 
Output 2:
6 

Example Explanation
Explanation 1:
The subarray [1, 2, 3, 4] has the maximum possible sum of 10. 
Explanation 2:
The subarray [4,-1,2,1] has the maximum possible sum of 6. 

Solution -

class Solution:
    # @param A : tuple of integers
    # @return an integer
    def maxSubArray(self, A):
        max_ending_here = max_so_far = A[0]
        for x in A[1:]:
            max_ending_here = max(x, max_ending_here+x)
            max_so_far = max(max_so_far, max_ending_here)
        return max_so_far

#######################################################################################################################

Q3. Continuous Sum Query

Problem Description
There are A beggars sitting in a row outside a temple. Each beggar initially has an empty pot. When the devotees come to the temple, they donate some amount of coins to these beggars. Each devotee gives a fixed amount of coin(according to their faith and ability) to some K beggars sitting next to each other.
Given the amount P donated by each devotee to the beggars ranging from L to R index, where 1 <= L <= R <= A, find out the final amount of money in each beggar's pot at the end of the day, provided they don't fill their pots by any other means.
For ith devotee B[i][0] = L, B[i][1] = R, B[i][2] = P, given by the 2D array B

Problem Constraints
1 <= A <= 2 * 105
1 <= L <= R <= A
1 <= P <= 103
0 <= len(B) <= 105

Input Format
The first argument is a single integer A.
The second argument is a 2D integer array B.

Output Format
Return an array(0 based indexing) that stores the total number of coins in each beggars pot.

Example Input
Input 1:-
A = 5
B = [[1, 2, 10], [2, 3, 20], [2, 5, 25]]

Example Output
Output 1:-
10 55 45 25 25

Example Explanation
Explanation 1:-
First devotee donated 10 coins to beggars ranging from 1 to 2. Final amount in each beggars pot after first devotee: [10, 10, 0, 0, 0]
Second devotee donated 20 coins to beggars ranging from 2 to 3. Final amount in each beggars pot after second devotee: [10, 30, 20, 0, 0]
Third devotee donated 25 coins to beggars ranging from 2 to 5. Final amount in each beggars pot after third devotee: [10, 55, 45, 25, 25]

Solution -

class Solution:
    # @param A : integer
    # @param B : list of list of integers
    # @return a list of integers
    def solve(self, A, B):
        l = [0]*A
        for i in range(len(B)):
            l[B[i][0]-1] += B[i][2]
            if B[i][1] == A:
                pass
            else:
                l[B[i][1]] += -B[i][2]

        sum_l = []
        summ = 0
        for i in l:
            summ += i
            sum_l.append(summ)

#######################################################################################################################

Q4. Add One To Number

Problem Description
Given a non-negative number represented as an array of digits, add 1 to the number ( increment the number represented by the digits ).
The digits are stored such that the most significant digit is at the head of the list.
NOTE: Certain things are intentionally left unclear in this question which you should practice asking the interviewer. For example: for this problem, the following are some good questions to ask :
Q: Can the input have 0's before the most significant digit. Or, in other words, is 0 1 2 3 a valid input?
A: For the purpose of this question, YES
Q: Can the output have 0's before the most significant digit? Or, in other words, is 0 1 2 4 a valid output?
A: For the purpose of this question, NO. Even if the input has zeroes before the most significant digit.

Problem Constraints
1 <= size of the array <= 1000000

Input Format
First argument is an array of digits.

Output Format
Return the array of digits after adding one.

Example Input
Input 1:
[1, 2, 3]

Example Output
Output 1:
[1, 2, 4]

Example Explanation
Explanation 1:
Given vector is [1, 2, 3].
The returned vector should be [1, 2, 4] as 123 + 1 = 124.

Solution -

class Solution:
    # @param A : list of integers
    # @return a list of integers
    def plusOne(self, A):
        s = ''
        for i in A:
            s += str(i)
        l = []    
        for i in str(int(s)+1):
            l.append(int(i))
        return l

#######################################################################################################################

Q5. Max Non Negative SubArray

Given an array of integers, A of length N, find out the maximum sum sub-array of non negative numbers from A.
The sub-array should be contiguous i.e., a sub-array created by choosing the second and fourth element and skipping the third element is invalid.
Maximum sub-array is defined in terms of the sum of the elements in the sub-array.
Find and return the required subarray.
NOTE:
    1. If there is a tie, then compare with segment's length and return segment which has maximum length.
    2. If there is still a tie, then return the segment with minimum starting index.

Input Format:
The first and the only argument of input contains an integer array A, of length N.

Output Format:
Return an array of integers, that is a subarray of A that satisfies the given conditions.

Constraints:
1 <= N <= 1e5
-INT_MAX < A[i] <= INT_MAX

Examples:
Input 1:
A = [1, 2, 5, -7, 2, 3]
Output 1:
[1, 2, 5]

Explanation 1:
The two sub-arrays are [1, 2, 5] [2, 3].
The answer is [1, 2, 5] as its sum is larger than [2, 3].
Input 2:
A = [10, -1, 2, 3, -4, 100]
Output 2:
[100]
Explanation 2:
The three sub-arrays are [10], [2, 3], [100].
The answer is [100] as its sum is larger than the other two.

Solution -

class Solution:
    # @param A : list of integers
    # @return a list of integers
    def maxset(self, A):
        curSum, maxSum = 0,0
        start,end,s = 0,0,0
        length = 0
        ans = []
        for i in range(len(A)):
            if A[i]<0:
                curSum = 0
                s = i+1
            else:
                curSum+= A[i]
                if curSum > maxSum:
                    maxSum = curSum
                    start = s
                    end = i+1
                    length = i - s
                elif curSum == maxSum and i - s > length:
                    start = s
                    end = i+1
        for i in range(start,end):
            ans.append(A[i])
        return ans

#######################################################################################################################

Q6. Flip

Problem Description
You are given a binary string A(i.e., with characters 0 and 1) consisting of characters A1, A2, ..., AN. In a single operation, you can choose two indices, L and R, such that 1 ≤ L ≤ R ≤ N and flip the characters AL, AL+1, ..., AR. By flipping, we mean changing character 0 to 1 and vice-versa.
Your aim is to perform ATMOST one operation such that in the final string number of 1s is maximized.
If you don't want to perform the operation, return an empty array. Else, return an array consisting of two elements denoting L and R. If there are multiple solutions, return the lexicographically smallest pair of L and R.
NOTE: Pair (a, b) is lexicographically smaller than pair (c, d) if a < c or, if a == c and b < d.

Problem Constraints
1 <= size of string <= 100000

Input Format
First and only argument is a string A.

Output Format
Return an array of integers denoting the answer.

Example Input
Input 1:
A = "010"
Input 2:
A = "111"

Example Output
Output 1:
[1, 1]
Output 2:
[]

Example Explanation
Explanation 1:
A = "010"
Pair of [L, R] | Final string
_______________|_____________
[1 1]          | "110"
[1 2]          | "100"
[1 3]          | "101"
[2 2]          | "000"
[2 3]          | "001"

We see that two pairs [1, 1] and [1, 3] give same number of 1s in final string. So, we return [1, 1].
Explanation 2:
No operation can give us more than three 1s in final string. So, we return empty array [].

Solution -

class Solution:
    # @param A : string
    # @return a list of integers
    def flip(self, A):
        N = len(A)
        cc = A.count('1')
        if cc == N:
            return []

        nums = [0] * N
        for i in range(N):
            if A[i] == '0':
                nums[i] =  1
            else:
                nums[i] = -1

        max_sum = float('-inf')
        cur_sum = 0
        r , l = 0 , 0
        currL = 0
        for i in range(len(A)):
            cur_sum += nums[i]
          
            if cur_sum < 0:
                cur_sum = 0
                currL = i + 1
                continue
            if cur_sum > max_sum:
                max_sum = cur_sum
                l = currL
                r = i
        l += 1
        r += 1
        return [l,r]

#######################################################################################################################

Q7. Sum of all Submatrices

Problem Description
Given a 2D Matrix A of dimensions N*N, we need to return the sum of all possible submatrices.

Problem Constraints
1 <= N <=30
0 <= A[i][j] <= 10

Input Format
Single argument representing a 2-D array A of size N x N.

Output Format
Return an integer denoting the sum of all possible submatrices in the given matrix.

Example Input
Input 1:
A = [ [1, 1]
      [1, 1] ]
Input 2:
A = [ [1, 2]
      [3, 4] ]

Example Output
Output 1:
16
Output 2:
40

Example Explanation
Example 1:
Number of submatrices with 1 elements = 4, so sum of all such submatrices = 4 * 1 = 4
Number of submatrices with 2 elements = 4, so sum of all such submatrices = 4 * 2 = 8
Number of submatrices with 3 elements = 0
Number of submatrices with 4 elements = 1, so sum of such submatrix = 4
Total Sum = 4+8+4 = 16
Example 2:
The submatrices are [1], [2], [3], [4], [1, 2], [3, 4], [1, 3], [2, 4] and [[1, 2], [3, 4]].
Total sum = 40

Solution -

class Solution:
    # @param A : list of list of integers
    # @return an integer
    def solve(self, A):
        n = len(A)
        sum = 0
        for i in range(n):
            for j in range(n):
                top_left = (i + 1) * (j + 1)
                bottom_right = (n - i) * (n - j)
                sum += top_left*bottom_right*A[i][j]
        return sum      

#######################################################################################################################

Q8. Sub-matrix Sum Queries

Problem Description
Given a matrix of integers A of size N x M and multiple queries Q, for each query, find and return the submatrix sum.
Inputs to queries are top left (b, c) and bottom right (d, e) indexes of submatrix whose sum is to find out.
NOTE:
Rows are numbered from top to bottom, and columns are numbered from left to right.
The sum may be large, so return the answer mod 109 + 7.
Also, select the data type carefully, if you want to store the addition of some elements.
Indexing given in B, C, D, and E arrays is 1-based.
Top Left 0-based index = (B[i] - 1, C[i] - 1)
Bottom Right 0-based index = (D[i] - 1, E[i] - 1)

Problem Constraints
1 <= N, M <= 1000
-100000 <= A[i] <= 100000
1 <= Q <= 100000
1 <= B[i] <= D[i] <= N
1 <= C[i] <= E[i] <= M

Input Format
The first argument given is the integer matrix A.
The second argument given is the integer array B.
The third argument given is the integer array C.
The fourth argument given is the integer array D.
The fifth argument given is the integer array E.
(B[i], C[i]) represents the top left corner of the i'th query.
(D[i], E[i]) represents the bottom right corner of the i'th query.

Output Format
Return an integer array containing the submatrix sum for each query.

Example Input
Input 1:
A = [   [1, 2, 3]
       [4, 5, 6]
       [7, 8, 9]   ]
B = [1, 2]
C = [1, 2]
D = [2, 3]
E = [2, 3]
Input 2:
A = [   [5, 17, 100, 11]
       [0, 0,  2,   8]    ]
B = [1, 1]
C = [1, 4]
D = [2, 2]
E = [2, 4]

Example Output
Output 1:
[12, 28]
Output 2:
[22, 19]

Example Explanation
Explanation 1:
For query 1: Submatrix contains elements: 1, 2, 4 and 5. So, their sum is 12.
For query 2: Submatrix contains elements: 5, 6, 8 and 9. So, their sum is 28.
Explanation 2:
For query 1: Submatrix contains elements: 5, 17, 0 and 0. So, their sum is 22.
For query 2: Submatrix contains elements: 11 and 8. So, their sum is 19.

Solution -

class Solution:
    # @param A : list of list of integers
    # @param B : list of integers
    # @param C : list of integers
    # @param D : list of integers
    # @param E : list of integers
    # @return a list of integers
    def solve(self, A, B, C, D, E):
        n = len(A)
        m = len(A[0])
        pf_a = []

        for i in range(n):
	        pf_a.append([0]*m)

        for i in range(n):
	        c = 0
	        for j in range(m):
		        c = c+A[i][j]
		        pf_a[i][j] = c
       
        for j in range(m):
	        c = 0
	        for i in range(n):
		        c = c+pf_a[i][j]
		        pf_a[i][j] = c

        q = len(B)
        ans= []
        for i in range(q):
             x1 = B[i] - 1
             y1 = C[i] - 1
             x2 = D[i] - 1
             y2 = E[i] - 1  
             if x1 == 0 and y1 != 0 :
                ans.append((pf_a[x2][y2] - pf_a[x2][y1-1])  % (10 ** 9 + 7))
             elif x1 != 0 and y1 == 0 :
                ans.append((pf_a[x2][y2] - pf_a[x1-1][y2]) % (10 ** 9 + 7))
             elif x1 == 0 and y1 == 0 :
                ans.append((pf_a[x2][y2])  % (10 ** 9 + 7))
             else :
                ans.append((pf_a[x2][y2] - pf_a[x2][y1-1] - pf_a[x1-1][y2] + pf_a[x1-1][y1-1]) % (10 ** 9 + 7))    
        return ans

#######################################################################################################################

Q9. Search in a row wise and column wise sorted matrix

Problem Description
Given a matrix of integers A of size N x M and an integer B.
In the given matrix every row and column is sorted in non-decreasing order. Find and return the position of B in the matrix in the given form:
If A[i][j] = B then return (i * 1009 + j)
If B is not present return -1.
Note 1: Rows are numbered from top to bottom and columns are numbered from left to right.
Note 2: If there are multiple B in A then return the smallest value of i*1009 +j such that A[i][j]=B.
Note 3: Expected time complexity is linear
Note 4: Use 1-based indexing

Problem Constraints
1 <= N, M <= 1000
-100000 <= A[i] <= 100000
-100000 <= B <= 100000

Input Format
The first argument given is the integer matrix A.
The second argument given is the integer B.

Output Format
Return the position of B and if it is not present in A return -1 instead.

Example Input
Input 1:-
A = [[1, 2, 3]
     [4, 5, 6]
     [7, 8, 9]]
B = 2
Input 2:-
A = [[1, 2]
     [3, 3]]
B = 3

Example Output
Output 1:-
1011
Output 2:-
2019

Example Explanation
Expanation 1:-
A[1][2] = 2
1 * 1009 + 2 = 1011
Explanation 2:-
A[2][1] = 3
2 * 1009 + 1 = 2019
A[2][2] = 3
2 * 1009 + 2 = 2020
The minimum value is 2019
        
Solution -

class Solution:
    # @param A : list of list of integers
    # @param B : integer
    # @return an integer

    def solve(self, A, B):
        n=len(A)
        m=len(A[0])
        i=0
        j=m-1
        ans=-1
        while(i<n and j>=0):
            if A[i][j]<B:
                i=i+1
            elif (A[i][j]>B):
                j=j-1
            else:
                while j>=0:
                    j=j-1
                    if (A[i][j]!=B):
                        break
                ans=(i+1)*1009+(j+2)               
                return ans
        return ans

#######################################################################################################################

Q10. Maximum Submatrix Sum

Problem Description
Given a row-wise and column-wise sorted matrix A of size N * M.
Return the maximum non-empty submatrix sum of this matrix.

Problem Constraints
1 <= N, M <= 1000
-109 <= A[i][j] <= 109

Input Format
The first argument is a 2D integer array A.

Output Format
Return a single integer that is the maximum non-empty submatrix sum of this matrix.

Example Input
Input 1:-
    -5 -4 -3
A = -1  2  3
     2  2  4
Input 2:-
    1 2 3
A = 4 5 6
    7 8 9

Example Output
Output 1:-
12
Output 2:-
45

Example Explanation
Expanation 1:-
The submatrix with max sum is 
-1 2 3
 2 2 4
 Sum is 12.
Explanation 2:-
The largest submatrix with max sum is 
1 2 3
4 5 6
7 8 9
The sum is 45.

Solution -

class Solution:
    # @param A : list of list of integers
     # @return an long
     # TC : O(NM) SC : O(1) accommodated DP states in input array to avoid additional O(NM) space
    def solve(self, A):
        n,m=len(A),len(A[0])
        maxSum=A[n-1][m-1]
        # right and bottom boundaries
        for j in range(m-2,-1,-1):
            A[n-1][j]+=A[n-1][j+1]
            maxSum=max(maxSum,A[n-1][j])
        for i in range(n-2,-1,-1):
            A[i][m-1]+=A[i+1][m-1]
            maxSum=max(maxSum,A[i][m-1])
        # Bottom up approach on rest of the matrix
        for i in range(n-2,-1,-1):
            for j in range(m-2,-1,-1):
                A[i][j]=A[i][j]+A[i+1][j]+A[i][j+1]-A[i+1][j+1]
                maxSum=max(maxSum,A[i][j])
        return maxSum
