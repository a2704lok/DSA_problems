Q1. Path in Directed Graph

Problem Description
Given an directed graph having A nodes labelled from 1 to A containing M edges given by matrix B of size M x 2such that there is a edge directed from node
B[i][0] to node B[i][1].
Find whether a path exists from node 1 to node A.
Return 1 if path exists else return 0.
NOTE:
There are no self-loops in the graph.
There are no multiple edges between two nodes.
The graph may or may not be connected.
Nodes are numbered from 1 to A.
Your solution will run on multiple test cases. If you are using global variables make sure to clear them.

Problem Constraints
2 <= A <= 105
1 <= M <= min(200000,A*(A-1))
1 <= B[i][0], B[i][1] <= A

Input Format
The first argument given is an integer A representing the number of nodes in the graph.
The second argument given a matrix B of size M x 2 which represents the M edges such that there is a edge directed from node B[i][0] to node B[i][1].

Output Format
Return 1 if path exists between node 1 to node A else return 0.

Example Input
Input 1:
A = 5
B = [  [1, 2] 
      [4, 1] 
      [2, 4] 
      [3, 4] 
      [5, 2] 
      [1, 3] ]
Input 2:
A = 5
B = [  [1, 2]
      [2, 3] 
        [3, 4] 
        [4, 5] ]

Example Output
Output 1:
0
Output 2:
1

Example Explanation
Explanation 1:
The given doens't contain any path from node 1 to node 5 so we will return 0.
Explanation 2:
Path from node1 to node 5 is ( 1 -> 2 -> 3 -> 4 -> 5 ) so we will return 1.

Solution -

from collections import deque
class Solution:
    # @param A : integer
    # @param B : list of list of integers
    # @return an integer
    def solve(self, A, B):
        adj_l = {}
        for i in range(A+1):
            adj_l[i] = []
        for i in range(len(B)):
            adj_l[B[i][0]].append(B[i][1])    

        st = deque()
        p = [False]*(A+1)
        st.append(1)
        while len(st)>0:
            x = st.popleft()
            for j in adj_l[x]:
                if p[j] == True:
                    continue
                else:
                    p[j] = True
                    st.append(j)
        if p[A] == True:
            return 1
        return 0                	 

########################################################################################################################

Q2. First Depth First Search

Problem Description
You are given N towns (1 to N). All towns are connected via unique directed path as mentioned in the input.
Given 2 towns find whether you can reach the first town from the second without repeating any edge.
B C : query to find whether B is reachable from C.
Input contains an integer array A of size N and 2 integers B and C ( 1 <= B, C <= N ).
There exist a directed edge from A[i] to i+1 for every 1 <= i < N. Also, it's guaranteed that A[i] <= i for every 1 <= i < N.
NOTE: Array A is 0-indexed. A[0] = 1 which you can ignore as it doesn't represent any edge.

Problem Constraints
1 <= N <= 100000

Input Format
First argument is vector A
Second argument is integer B
Third argument is integer C

Output Format
Return 1 if reachable, 0 otherwise.

Example Input
Input 1:
A = [1, 1, 2]
B = 1
C = 2
Input 2:
A = [1, 1, 2]
B = 2
C = 1

Example Output
Output 1:
0
Output 2:
1

Example Explanation
Explanation 1:
Tree is 1--> 2--> 3 and hence 1 is not reachable from 2.
Explanation 2:
Tree is 1--> 2--> 3 and hence 2 is reachable from 1.

Solution -

from collections import defaultdict

class Solution:
	# @param A : list of integers
	# @param B : integer
	# @param C : integer
	# @return an integer
	def solve(self, A, B, C):
        adj_lst = defaultdict(list)
        for x in range(1, len(A)):
            adj_lst[A[x]].append(x+1)

        def graph_dfs(starting_node, visited):
            visited[starting_node] = 1
            for nbr in adj_lst[starting_node]:
                graph_dfs(nbr, visited)

        visited = [0]*(len(A)+1)
        graph_dfs(C, visited)
        return visited[B]

########################################################################################################################

Q3. Rotten Oranges

Problem Description
Given a matrix of integers A of size N x M consisting of 0, 1 or 2.
Each cell can have three values:
The value 0 representing an empty cell.
The value 1 representing a fresh orange.
The value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (Left, Right, Top, or Bottom) to a rotten orange becomes rotten. Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1 instead.
Note: Your solution will run on multiple test cases. If you are using global variables, make sure to clear them.

Problem Constraints
1 <= N, M <= 1000
0 <= A[i][j] <= 2

Input Format
The first argument given is the integer matrix A.

Output Format
Return the minimum number of minutes that must elapse until no cell has a fresh orange.
If this is impossible, return -1 instead.

Example Input
Input 1:
A = [   [2, 1, 1]
        [1, 1, 0]
        [0, 1, 1]   ]
Input 2:
A = [   [2, 1, 1]
        [0, 1, 1]
        [1, 0, 1]   ]

Example Output
Output 1:
4
Output 2:
-1

Example Explanation
Explanation 1:
Minute 0: [ [2, 1, 1]
            [1, 1, 0]
            [0, 1, 1] ]
Minute 1: [ [2, 2, 1]
            [2, 1, 0]
            [0, 1, 1] ]
Minute 2: [ [2, 2, 2]
            [2, 2, 0]
            [0, 1, 1] ]
Minute 3: [ [2, 2, 2]
            [2, 2, 0]
            [0, 2, 1] ]
Minute 4: [ [2, 2, 2]
            [2, 2, 0]
            [0, 2, 2] ]
At Minute 4, all the oranges are rotten.
Explanation 2:
The fresh orange at 2nd row and 0th column cannot be rotten, So return -1.

Solution -

from collections import deque
class Solution:
    # @param A : list of list of integers
    # @return an integer
    def solve(self, A):
        n = len(A)
        m = len(A[0])
        inf = 10000000000000
        dist = [[0 for j in range(m)] for i in range(n)]
        q = deque()
        li = [[-1, 0], [1, 0], [0, 1], [0, -1]]
        for i in range(n):
            for j in range(m):
                if(A[i][j] == 1 or A[i][j] == 0):
                    dist[i][j] = inf
                else:
                    q.append([i, j])
        while(len(q) != 0):
            x, y = q.popleft()
            for k in range(4):
                dx = x+li[k][0]
                dy = y+li[k][1]
                if(dx >= 0 and dy >= 0 and dx < n and dy < m and A[dx][dy] == 1 and dist[x][y] + 1 < dist[dx][dy]):
                    dist[dx][dy] = dist[x][y] + 1
                    q.append([dx, dy])
        ans = 0
        for i in range(n):
            for j in range(m):
                if(A[i][j] == 1):
                    ans = max(ans, dist[i][j])
        if(ans == inf):
            return -1
        return ans

########################################################################################################################

Q4. Number of islands

Problem Description
Given a matrix of integers A of size N x M consisting of 0 and 1. A group of connected 1's forms an island. From a cell (i, j) such that A[i][j] = 1 you can visit any cell that shares a corner with (i, j) and value in that cell is 1.
More formally, from any cell (i, j) if A[i][j] = 1 you can visit:
(i-1, j) if (i-1, j) is inside the matrix and A[i-1][j] = 1.
(i, j-1) if (i, j-1) is inside the matrix and A[i][j-1] = 1.
(i+1, j) if (i+1, j) is inside the matrix and A[i+1][j] = 1.
(i, j+1) if (i, j+1) is inside the matrix and A[i][j+1] = 1.
(i-1, j-1) if (i-1, j-1) is inside the matrix and A[i-1][j-1] = 1.
(i+1, j+1) if (i+1, j+1) is inside the matrix and A[i+1][j+1] = 1.
(i-1, j+1) if (i-1, j+1) is inside the matrix and A[i-1][j+1] = 1.
(i+1, j-1) if (i+1, j-1) is inside the matrix and A[i+1][j-1] = 1.
Return the number of islands.
NOTE: Rows are numbered from top to bottom and columns are numbered from left to right.

Problem Constraints
1 <= N, M <= 100
0 <= A[i] <= 1

Input Format
The only argument given is the integer matrix A.

Output Format
Return the number of islands.

Example Input
Input 1:
A = [ 
     [0, 1, 0]
     [0, 0, 1]
     [1, 0, 0]
   ]
Input 2:
A = [   
     [1, 1, 0, 0, 0]
     [0, 1, 0, 0, 0]
     [1, 0, 0, 1, 1]
     [0, 0, 0, 0, 0]
     [1, 0, 1, 0, 1]    
   ]

Example Output
Output 1:
2
Output 2:
5

Example Explanation
Explanation 1:
The 1's at position A[0][1] and A[1][2] forms one island.
Other is formed by A[2][0].
Explanation 2:
There 5 island in total.

Solution -

import sys 
sys.setrecursionlimit(10**6)

class Solution:
    def backtracking(self,i,j,mat,N,M):
        if i < 0 or i >= N or j < 0 or j >= M:
            return 

        if mat[i][j] == 0:
            return 
        
        if mat[i][j] == 1:
            mat[i][j] = 0              # make it visited 
            
            self.backtracking(i-1,j,mat,N,M)
            self.backtracking(i,j-1,mat,N,M)
            self.backtracking(i+1,j,mat,N,M)
            self.backtracking(i,j+1,mat,N,M)
            self.backtracking(i-1, j-1,mat,N,M)
            self.backtracking(i+1, j+1,mat,N,M)
            self.backtracking(i-1, j+1,mat,N,M)
            self.backtracking(i+1, j-1,mat,N,M)
    
    def solve(self,grid):
        N , M = len(grid) , len(grid[0])
        
        islands = 0
        for i in range(N):
            for j in range(M):
                if grid[i][j] == 1:
                    self.backtracking(i,j,grid,N,M)
                    islands += 1
        return islands

########################################################################################################################

Q5. Number of islands II

Problem Description
Given a matrix of integers A of size N x M consisting of 0 and 1. A group of connected 1's forms an island. From a cell (i, j) such that A[i][j] = 1 you can visit any cell that shares a side with (i, j) and value in that cell is 1.
More formally, from any cell (i, j) if A[i][j] = 1 you can visit:
(i-1, j) if (i-1, j) is inside the matrix and A[i-1][j] = 1.
(i, j-1) if (i, j-1) is inside the matrix and A[i][j-1] = 1.
(i+1, j) if (i+1, j) is inside the matrix and A[i+1][j] = 1.
(i, j+1) if (i, j+1) is inside the matrix and A[i][j+1] = 1.
Return the number of islands.
Note:
Rows are numbered from top to bottom and columns are numbered from left to right.
Your solution will run on multiple test cases. If you are using global variables, make sure to clear them.

Problem Constraints
1 <= N, M <= 100
0 <= A[i] <= 1

Input Format
The only argument given is the integer matrix A.

Output Format
Return the number of islands.

Example Input
Input 1:
A = [ [0, 1, 0]
      [0, 0, 1]
      [1, 0, 0] ]
Input 2:
A = [ [1, 1, 0, 0, 0]
      [1, 1, 0, 0, 0]
      [0, 0, 0, 0, 0]
      [0, 0, 0, 1, 1] ]

Example Output
Output 1:
3
Output 2:
2

Example Explanation
Explanation 1:
There are 3 islands in the matrix
Explanation 2:
There are 2 islands in the matrix

Solution -

import sys 
sys.setrecursionlimit(10**6)

class Solution:
    def backtracking(self,i,j,mat,N,M):
        if i < 0 or i >= N or j < 0 or j >= M:
            return 

        if mat[i][j] == 0:
            return 
        
        if mat[i][j] == 1:
            mat[i][j] = 0              # make it visited 
            
            self.backtracking(i-1,j,mat,N,M)
            self.backtracking(i,j-1,mat,N,M)
            self.backtracking(i+1,j,mat,N,M)
            self.backtracking(i,j+1,mat,N,M)
    
    def solve(self,grid):
        N , M = len(grid) , len(grid[0])
        
        islands = 0
        for i in range(N):
            for j in range(M):
                if grid[i][j] == 1:
                    self.backtracking(i,j,grid,N,M)
                    islands += 1
        return islands

########################################################################################################################

Q6. Distance of nearest cell

Problem Description
Given a matrix of integers A of size N x M consisting of 0 or 1.
For each cell of the matrix find the distance of nearest 1 in the matrix.
Distance between two cells (x1, y1) and (x2, y2) is defined as |x1 - x2| + |y1 - y2|.
Find and return a matrix B of size N x M which defines for each cell in A distance of nearest 1 in the matrix A.
NOTE: There is atleast one 1 is present in the matrix.

Problem Constraints
1 <= N, M <= 1000
0 <= A[i][j] <= 1

Input Format
The first argument given is the integer matrix A.

Output Format
Return the matrix B.

Example Input
Input 1:
A = [
     [0, 0, 0, 1]
     [0, 0, 1, 1] 
     [0, 1, 1, 0]
   ]
Input 2:
A = [
     [1, 0, 0]
     [0, 0, 0]
     [0, 0, 0]  
   ]

Example Output
Output 1:
 [ 
   [3, 2, 1, 0]
   [2, 1, 0, 0]
   [1, 0, 0, 1]   
 ]
Output 2:
 [
   [0, 1, 2]
   [1, 2, 3]
   [2, 3, 4] 
 ]

Example Explanation
Explanation 1:
A[0][0], A[0][1], A[0][2] will be nearest to A[0][3].
A[1][0], A[1][1] will be nearest to A[1][2].
A[2][0] will be nearest to A[2][1] and A[2][3] will be nearest to A[2][2].
Explanation 2:
There is only a single 1. Fill the distance from that 1.
 
Solution -

from collections import deque 
class Solution:
    # @param A : list of list of integers
    # @return a list of list of integers
    def solve(self, grid):
		N , M = len(grid) , len(grid[0])

		visited = [[False]*M for _ in range(N)]

		q = deque()
		
		for i in range(N):
		    for j in range(M):
                # we are appending all the Ones intially in Queue 
		        if grid[i][j] == 1:
		            visited[i][j] = True 
		            q.append((i,j ,0))
		            grid[i][j] = 0              # make it zero 
		            
		directions = [[1,0],[0,1],[-1,0],[0,-1]]
		
		while q:
		    row , col  , count = q.popleft()
		    
		    for i , j in directions:
		        cr = row + i
		        cc = col + j 
		        
		        if cr < 0 or cc < 0 or cr >= N or cc >= M or visited[cr][cc] or grid[cr][cc] != 0:
		            continue
		        
		        grid[cr][cc] = count + 1
		        visited[cr][cc] = True
		        q.append( (cr,cc , count + 1) )
		        
		return grid

########################################################################################################################

Q7. Check Bipartite Graph

Problem Description
Given a undirected graph having A nodes. A matrix B of size M x 2 is given which represents the edges such that there is an edge between B[i][0] and B[i][1].
Find whether the given graph is bipartite or not.
A graph is bipartite if we can split it's set of nodes into two independent subsets A and B such that every edge in the graph has one node in A and another node in B
Note:
There are no self-loops in the graph.
No multiple edges between two pair of vertices.
The graph may or may not be connected.
Nodes are Numbered from 0 to A-1.
Your solution will run on multiple testcases. If you are using global variables make sure to clear them.

Problem Constraints
1 <= A <= 100000
1 <= M <= min(A*(A-1)/2,200000)
0 <= B[i][0],B[i][1] < A

Input Format
The first argument given is an integer A.
The second argument given is the matrix B.

Output Format
Return 1 if the given graph is bipartide else return 0.

Example Input
Input 1:
A = 2
B = [ [0, 1] ]
Input 2:
A = 3
B = [ [0, 1], [0, 2], [1, 2] ]

Example Output
Output 1:
1
Output 2:
0

Example Explanation
Explanation 1:
Put 0 and 1 into 2 different subsets.
Explanation 2:
It is impossible to break the graph down to make two different subsets for bipartite matching

Solution - 

from collections import defaultdict, deque
class Solution:
    # @param A : integer
    # @param B : list of list of integers
    # @return an integer
    def solve(self, A, B):
        g = defaultdict(list)
        for start, end in B:
            g[start].append(end)
            g[end].append(start)
        visited = {}
        for i in range(A):
            if i not in visited:
                color = 1
                q = deque()
                q.append(i)
                visited[i] = 0
                while q:
                    sz = len(q)
                    for _ in range(sz):
                        top = q.popleft()
                        if top in g:
                            for neigh in g[top]:
                                if neigh in visited:
                                    if visited[neigh] == 1-color:
                                        return 0
                                else:
                                    visited[neigh] = color
                                    q.append(neigh)
                    color = 1 - color
        return 1

########################################################################################################################

Q8. Construct Roads

Problem Description
A country consist of N cities connected by N - 1 roads. King of that country want to construct maximum number of roads such that the new country formed remains bipartite country.
Bipartite country is a country, whose cities can be partitioned into 2 sets in such a way, that for each road (u, v) that belongs to the country, u and v belong to different sets. Also, there should be no multiple roads between two cities and no self loops.
Return the maximum number of roads king can construct. Since the answer could be large return answer % 109 + 7.
NOTE: All cities can be visited from any city.

Problem Constraints
1 <= A <= 105
1 <= B[i][0], B[i][1] <= N

Input Format
First argument is an integer A denoting the number of cities, N.
Second argument is a 2D array B of size (N-1) x 2 denoting the initial roads i.e. there is a road between cities B[i][0] and B[1][1] .

Output Format
Return an integer denoting the maximum number of roads king can construct.

Example Input
Input 1:
A = 3
B = [
     [1, 2]
     [1, 3]
   ]
Input 2:
A = 5
B = [
     [1, 3]
     [1, 4]
     [3, 2]
     [3, 5]
   ]

Example Output
Output 1:
0
Output 2:
2

Example Explanation
Explanation 1:
We can't construct any new roads such that the country remains bipartite.
Explanation 2:
 We can add two roads between cities (4, 2) and (4, 5).

Solution -

from collections import deque
class Solution:
    # @param A : integer
    # @param B : list of list of integers
    # @return an integer
    def solve(self, A, B):
        adj_l = {}
        for i in range(A+1):
            adj_l[i] = []

        for i in range(len(B)):
            adj_l[B[i][0]].append(B[i][1])
            adj_l[B[i][1]].append(B[i][0])

        q = deque()
        col = [0]*(A+1)
        col[1] = 1
        q.append(1)
        while len(q)>0:
            u = q.popleft()
            for i in range(len(adj_l[u])):
                v = adj_l[u][i]
                if col[v] == 0:
                    col[v] = 3-col[u]
                    q.append(v)

        c1 = 0
        c2 = 0
        for i in range(1,len(col)):
            if col[i] == 1:
                c1+=1
            else:
                c2+=1
        return (c1*c2-len(B))%1000000007

########################################################################################################################

Q9. Distance of nearest cell

Problem Description
Given a matrix of integers A of size N x M consisting of 0 or 1.
For each cell of the matrix find the distance of nearest 1 in the matrix.
Distance between two cells (x1, y1) and (x2, y2) is defined as |x1 - x2| + |y1 - y2|.
Find and return a matrix B of size N x M which defines for each cell in A distance of nearest 1 in the matrix A.
NOTE: There is atleast one 1 is present in the matrix.

Problem Constraints
1 <= N, M <= 1000
0 <= A[i][j] <= 1

Input Format
The first argument given is the integer matrix A.

Output Format
Return the matrix B.

Example Input
Input 1:
A = [
     [0, 0, 0, 1]
     [0, 0, 1, 1] 
     [0, 1, 1, 0]
   ]
Input 2:
A = [
     [1, 0, 0]
     [0, 0, 0]
     [0, 0, 0]  
   ]

Example Output
Output 1:
[ 
 [3, 2, 1, 0]
 [2, 1, 0, 0]
 [1, 0, 0, 1]   
]
Output 2:
[
 [0, 1, 2]
 [1, 2, 3]
 [2, 3, 4] 
]

Example Explanation
Explanation 1:
A[0][0], A[0][1], A[0][2] will be nearest to A[0][3].
A[1][0], A[1][1] will be nearest to A[1][2].
A[2][0] will be nearest to A[2][1] and A[2][3] will be nearest to A[2][2].
Explanation 2:
There is only a single 1. Fill the distance from that 1.

Solution -

from collections import deque 
class Solution:
    # @param A : list of list of integers
    # @return a list of list of integers
    def solve(self, grid):
		N , M = len(grid) , len(grid[0])

		visited = [[False]*M for _ in range(N)]

		q = deque()
		
		for i in range(N):
		    for j in range(M):
                # we are appending all the Ones intially in Queue 
		        if grid[i][j] == 1:
		            visited[i][j] = True 
		            q.append((i,j ,0))
		            grid[i][j] = 0              # make it zero 
		            
		directions = [[1,0],[0,1],[-1,0],[0,-1]]
		
		while q:
		    row , col  , count = q.popleft()
		    
		    for i , j in directions:
		        cr = row + i
		        cc = col + j 
		        
		        if cr < 0 or cc < 0 or cr >= N or cc >= M or visited[cr][cc] or grid[cr][cc] != 0:
		            continue
		        
		        grid[cr][cc] = count + 1
		        visited[cr][cc] = True
		        q.append( (cr,cc , count + 1) )
		        
		return grid

########################################################################################################################

Q10. Dijkstra

Problem Description
Given a weighted undirected graph having A nodes and M weighted edges, and a source node C.
You have to find an integer array D of size A such that:
D[i]: Shortest distance from the C node to node i.
If node i is not reachable from C then -1.
Note:
There are no self-loops in the graph.
There are no multiple edges between two pairs of vertices.
The graph may or may not be connected.
Nodes are numbered from 0 to A-1.
Your solution will run on multiple test cases. If you are using global variables, make sure to clear them.

Problem Constraints
1 <= A <= 1e5
0 <= B[i][0],B[i][1] < A
0 <= B[i][2] <= 1e3
0 <= C < A

Input Format
The first argument is an integer A, representing the number of nodes in the graph.
The second argument is a matrix B of size M x 3, where each row represents an edge in the graph. The three columns of each row denote the source node B[i][0], the destination node B[i][1], and the weight of the edge B[i][2].
The third argument is an integer C, representing the source node for which the shortest distance to all other nodes needs to be found.

Output Format
Return the integer array D.

Example Input
Input 1:
A = 6
B = [   [0, 4, 9]
        [3, 4, 6] 
        [1, 2, 1] 
        [2, 5, 1] 
        [2, 4, 5] 
        [0, 3, 7] 
        [0, 1, 1] 
        [4, 5, 7] 
        [0, 5, 1] ] 
C = 4
Input 2:
A = 5
B = [   [0, 3, 4]
        [2, 3, 3] 
        [0, 1, 9] 
        [3, 4, 10] 
        [1, 3, 8]  ] 
C = 4

Example Output
Output 1:
D = [7, 6, 5, 6, 0, 6]
Output 2:
D = [14, 18, 13, 10, 0]

Example Explanation
Explanation 1:
All Paths can be considered from the node C to get shortest path
Explanation 2:
All Paths can be considered from the node C to get shortest path

Solution -

import heapq as hq 
class Solution:
    # @param A : integer
    # @param B : list of list of integers
    # @param C : integer
    # @return a list of integers
    def Dijsktra(self,min_heap,adj,distance_array):
        # CONTINUE OPERATION TILL HEAP IS EMPTY 
        while min_heap:
            cur_node , node_dis = hq.heappop(min_heap)

            for child , cur_dis  in adj[cur_node]:
                # node_dis + cur_dis represents the total distance travelled from src node to child 
                if node_dis + cur_dis < distance_array[child]:        # if cur_path_dis < prev_cal distance 
                    distance_array[child] = node_dis + cur_dis
                    hq.heappush(min_heap,(child,distance_array[child]))
        # print(min_heap)

    def solve(self, N, B, C):
        # CREATE ADJ MATRIX 
        adj = [[] for _ in range(N)]

        for cur in range(len(B)):
            row = B[cur][0]
            val = B[cur][1]
            dis = B[cur][2]
            adj[row].append((val,dis))
            adj[val].append((row,dis))
        # print(adj)

        # CREATE DISTNACE ARRAY FOR SRC TO Ith Node
        distance_array = [float('inf')] * N
        distance_array[C] = 0

        # PUSH THE SRC NODE TO HEAP 
        min_heap = []
        hq.heappush(min_heap,(C,0)) # src-node , distance
        
        self.Dijsktra(min_heap,adj,distance_array)

        for node in range(N):
            if distance_array[node] == float('inf'):
                distance_array[node] = -1

        return distance_array

########################################################################################################################

Q11. Topological Sort

Problem Description
Given an directed acyclic graph having A nodes. A matrix B of size M x 2 is given which represents the M edges such that there is a edge directed from node B[i][0] to node B[i][1].
Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge uv, vertex u comes before v in the ordering. Topological Sorting for a graph is not possible if the graph is not a DAG.
Return the topological ordering of the graph and if it doesn't exist then return an empty array.
If there is a solution return the correct ordering. If there are multiple solutions print the lexographically smallest one.
Ordering (a, b, c) is said to be lexographically smaller than ordering (e, f, g) if a < e or if(a==e) then b < f and so on.
NOTE:
There are no self-loops in the graph.
The graph may or may not be connected.
Nodes are numbered from 1 to A.
Your solution will run on multiple test cases. If you are using global variables make sure to clear them.

Problem Constraints
2 <= A <= 104
1 <= M <= min(100000,A*(A-1))
1 <= B[i][0], B[i][1] <= A

Input Format
The first argument given is an integer A representing the number of nodes in the graph.
The second argument given a matrix B of size M x 2 which represents the M edges such that there is a edge directed from node B[i][0] to node B[i][1].

Output Format
Return a one-dimensional array denoting the topological ordering of the graph and it it doesn't exist then return empty array.

Example Input
Input 1:
A = 6
B = [  [6, 3] 
      [6, 1] 
      [5, 1] 
      [5, 2] 
      [3, 4] 
      [4, 2] ]
Input 2:
A = 3
B = [  [1, 2]
      [2, 3] 
      [3, 1] ]

Example Output
Output 1:
[5, 6, 1, 3, 4, 2]
Output 2:
[]

Example Explanation
Explanation 1:
The given graph contain no cycle so topological ordering exists which is [5, 6, 1, 3, 4, 2]
Explanation 2:
The given graph contain cycle so topological ordering not possible we will return empty array.

Solution -

from collections import deque
import heapq
from collections import defaultdict
class Solution:
    # @param A : integer
    # @param B : list of list of integers
    # @return a list of integers
    def solve(self, A, B):
        adjlist = defaultdict(list) 
        inc=[0]*(A+1)
        for i in range(len(B)):
            adjlist[B[i][0]].append(B[i][1])
            inc[B[i][1]]+=1
        q=deque()

        for i in range(A+1):
            if inc[i]==0:
                q.append(i)
        ans=[]
        while(len(q)>0):
            q=sorted(q)
            q=deque(q)
            u=q.popleft()
            ans.append(u)
            for k in range(len(adjlist[u])):
                v=adjlist[u][k]
                inc[v]-=1
                if inc[v]==0:
                    q.append(v)

        return ans[1:]

########################################################################################################################

Q12. Cycle in Directed Graph

Problem Description
Given an directed graph having A nodes. A matrix B of size M x 2 is given which represents the M edges such that there is a edge directed from node B[i][0] to node B[i][1].
Find whether the graph contains a cycle or not, return 1 if cycle is present else return 0.
NOTE:
The cycle must contain atleast two nodes.
There are no self-loops in the graph.
There are no multiple edges between two nodes.
The graph may or may not be connected.
Nodes are numbered from 1 to A.
Your solution will run on multiple test cases. If you are using global variables make sure to clear them.

Problem Constraints
2 <= A <= 105
1 <= M <= min(200000,A*(A-1))
1 <= B[i][0], B[i][1] <= A

Input Format
The first argument given is an integer A representing the number of nodes in the graph.
The second argument given a matrix B of size M x 2 which represents the M edges such that there is a edge directed from node B[i][0] to node B[i][1].

Output Format
Return 1 if cycle is present else return 0.

Example Input
Input 1:
A = 5
B = [  [1, 2] 
      [4, 1] 
      [2, 4] 
      [3, 4] 
      [5, 2] 
      [1, 3] ]
Input 2:
A = 5
B = [  [1, 2]
      [2, 3] 
      [3, 4] 
      [4, 5] ]

Example Output
Output 1:
1
Output 2:
0

Example Explanation
Explanation 1:
The given graph contain cycle 1 -> 3 -> 4 -> 1 or the cycle 1 -> 2 -> 4 -> 1
Explanation 2:
The given graph doesn't contain any cycle.

Soltion -

from collections import deque
class Solution:
    # @param A : integer
    # @param B : list of list of integers
    # @return an integer
    def solve(self, A, B):
        adj_l = {}
        for i in range(A+1):
            adj_l[i] = []

        for i in range(len(B)):
            adj_l[B[i][0]].append(B[i][1])

        inc = [0]*(A+1)
        for i in range(A+1):
            for j in adj_l[i]:
                inc[j]+=1

        q = deque()
        for i in range(1,A+1):
            if inc[i] == 0:
                q.append(i)

        c = 0
        while len(q)>0:
            u = q.popleft()
            c+=1
            for i in range(len(adj_l[u])):
                v = adj_l[u][i]
                inc[v] -= 1
                if inc[v] == 0:
                    q.append(v)

        if c == A:
            return 0
        return 1

########################################################################################################################

Q3. Possibility of Finishing

Problem Description
There are a total of A courses you have to take, labeled from 1 to A.
Some courses may have prerequisites, for example to take course 2 you have to first take course 1, which is expressed as a pair: [1,2].
So you are given two integer array B and C of same size where for each i (B[i], C[i]) denotes a pair.
Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?
Return 1 if it is possible to finish all the courses, or 0 if it is not possible to finish all the courses.

Problem Constraints
1 <= A <= 6*104
1 <= length(B) = length(C) <= 105
1 <= B[i], C[i] <= A

Input Format
The first argument of input contains an integer A, representing the number of courses.
The second argument of input contains an integer array, B.
The third argument of input contains an integer array, C.

Output Format
Return 1 if it is possible to finish all the courses, or 0 if it is not possible to finish all the courses.

Example Input
Input 1:
A = 3
B = [1, 2]
C = [2, 3]
Input 2:
A = 2
B = [1, 2]
C = [2, 1]

Example Output
Output 1:
1
Output 2:
0

Example Explanation
Explanation 1:
It is possible to complete the courses in the following order:
1 -> 2 -> 3
Explanation 2:
It is not possible to complete all the courses.

Solution -

from collections import deque
class Solution:
	# @param A : integer
	# @param B : list of integers
	# @param C : list of integers
	# @return an integer
	def solve(self, A, B, C):
        adj_l = {}
        for i in range(A+1):
            adj_l[i] = []

        for i in range(len(B)):
            adj_l[B[i]].append(C[i])    


        # adj_l[B[0]].append(B[1])
        # adj_l[C[0]].append(C[1])               

        inc = [0]*(A+1)
        for i in range(A+1):
            for j in adj_l[i]:
                inc[j]+=1

        q = deque()
        for i in range(1,A+1):
            if inc[i] == 0:
                q.append(i)

        c = 0
        while len(q)>0:
            u = q.popleft()
            c+=1
            for i in range(len(adj_l[u])):
                v = adj_l[u][i]
                inc[v] -= 1
                if inc[v] == 0:
                    q.append(v)

        if c == A:
            return 1
        return 0
