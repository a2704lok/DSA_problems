Q1. Diagonal Traversal

Problem Description
Consider lines of slope -1 passing between nodes.
Given a Binary Tree A containing N nodes, return all diagonal elements in a binary tree belonging to same line.
NOTE:
See Sample Explanation for better understanding.
Order does matter in the output.
To get the same order as in the output traverse the tree same as we do in pre-order traversal.

Problem Constraints
0 <= N <= 105

Input Format
First and only Argument represents the root of binary tree A.

Output Format
Return a 1D array denoting the diagonal traversal of the tree.

Example Input
Input 1:

            1
          /   \
         4      2
        / \      \
       8   5      3
          / \    /
         9   7  6
Input 2:

             11
          /     \
         20      12
        / \       \
       1   15      13
          /  \     /
         2    17  16
          \   /
          22 34


Example Output
Output 1:
[1, 2, 3, 4, 5, 7, 6, 8, 9]
Output 2:
[11, 12, 13, 20, 15, 17, 16, 1, 2, 22, 34]

Example Explanation
Explanation 1:
1) Diagonal 1 contains [1, 2, 3]
2) Diagonal 2 contains [4, 5, 7, 6]
3) Diagonal 3 contains [8, 9]
NOTE:
The order in the output matters like for Example:
6 and 7 belong to same diagonal i.e diagonal 2 but as 7 comes before 6 in pre-order traversal so 7 will be added to answer array first.
So concantenate all the array as return it as a single one.
Final output: [1, 2, 3, 4, 5, 7, 6, 8, 9]
Explanation 2:
1) Diagonal 1 contains [11, 12, 13]
2) Diagonal 2 contains [20, 15, 17, 16]
3) Diagonal 2 contains [1, 2, 22, 34]
So concantenate all the array as return it as a single one.
Final output: [11, 12, 13, 20, 15, 17, 16, 1, 2, 22, 34]

Solution -

# Definition for a  binary tree node
# class TreeNode:
#    def __init__(self, x):
#        self.val = x
#        self.left = None
#        self.right = None

from collections import deque
class Solution:
    # @param A : root node of tree
    # @return a list of integers
    def solve(self, A):
        q = []
        ans = []

        if A == None:
            return ans

        q.append(A)

        while len(q)>0:
            temp = q.pop(0)
            while temp != None:
                if temp.left != None:
                    q.append(temp.left)
                
                ans.append(temp.val)
                temp = temp.right

        return ans

#######################################################################################################################

Q2. Odd and Even Levels

Problem Description
Given a binary tree of integers. Find the difference between the sum of nodes at odd level and sum of nodes at even level.
NOTE: Consider the level of root node as 1.

Problem Constraints
1 <= Number of nodes in binary tree <= 100000
0 <= node values <= 109

Input Format
First and only argument is a root node of the binary tree, A

Output Format
Return an integer denoting the difference between the sum of nodes at odd level and sum of nodes at even level.

Example Input
Input 1:

        1
      /   \
     2     3
    / \   / \
   4   5 6   7
  /
 8 
Input 2:

        1
       / \
      2   10
       \
        4


Example Output
Output 1:
10
Output 2:
-7

Example Explanation
Explanation 1:
Sum of nodes at odd level = 23
Sum of ndoes at even level = 13
Explanation 2:
Sum of nodes at odd level = 5
Sum of ndoes at even level = 12

Solution -

# Definition for a  binary tree node
# class TreeNode:
#    def __init__(self, x):
#        self.val = x
#        self.left = None
#        self.right = None

from collections import deque

class Solution:
    # @param A : root node of tree
    # @return an integer
    def solve(self, A):
        odd_sum = 0
        even_sum = 0
        q = deque()
        ans_l = []
        q.append(A)
        while len(q)>0:
            m = len(q)
            l = [] 
            for _ in range(m):
                f = q.popleft()
                l.append(f.val)
                if f.left != None:
                    q.append(f.left)
                if f.right != None:
                    q.append(f.right)

            ans_l.append(l)

        for i in range(len(ans_l)):
            if i % 2 == 0:
                odd_sum += sum(ans_l[i])
            else:
                even_sum += sum(ans_l[i])          

        return odd_sum - even_sum

#######################################################################################################################

Q3. Binary Tree From Inorder And Preorder

Problem Description
Given preorder and inorder traversal of a tree, construct the binary tree.
NOTE: You may assume that duplicates do not exist in the tree.

Problem Constraints
1 <= number of nodes <= 105

Input Format
First argument is an integer array A denoting the preorder traversal of the tree.
Second argument is an integer array B denoting the inorder traversal of the tree.

Output Format
Return the root node of the binary tree.

Example Input
Input 1:
A = [1, 2, 3]
B = [2, 1, 3]
Input 2:
A = [1, 6, 2, 3]
B = [6, 1, 3, 2]

Example Output
Output 1:
   1
  / \
 2   3
Output 2:
   1  
  / \
 6   2
    /
   3

Example Explanation
Explanation 1:
Create the binary tree and return the root node of the tree.

Solution -

# Definition for a  binary tree node
# class TreeNode:
#	def __init__(self, x):
#		self.val = x
#		self.left = None
#		self.right = None

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


class Solution:
	# @param A : list of integers
	# @param B : list of integers
	# @return the root node in the tree
	def buildTree(self, A, B):   ## A is pre order ## B is inorder
        if not A or not B:
            return None
        
        root_val = A[0]
        root = TreeNode(root_val)

        root_index = B.index(root_val)
        
        left_inorder = B[:root_index]
        right_inorder = B[root_index+1:]

        left_preorder = A[1:len(left_inorder)+1]
        right_preorder = A[len(left_inorder)+1:]

        root.left = self.buildTree(left_preorder, left_inorder)
        root.right = self.buildTree(right_preorder, right_inorder)

        return root

#######################################################################################################################

Q4. Binary Tree From Inorder And Postorder

Problem Description
Given the inorder and postorder traversal of a tree, construct the binary tree.
NOTE: You may assume that duplicates do not exist in the tree.

Problem Constraints
1 <= number of nodes <= 105

Input Format
First argument is an integer array A denoting the inorder traversal of the tree.
Second argument is an integer array B denoting the postorder traversal of the tree.

Output Format
Return the root node of the binary tree.

Example Input
Input 1:
A = [2, 1, 3]
B = [2, 3, 1]
Input 2:
A = [6, 1, 3, 2]
B = [6, 3, 2, 1]

Example Output
Output 1:
   1
  / \
 2   3
Output 2:
   1  
  / \
 6   2
    /
   3

Example Explanation
Explanation 1:
Create the binary tree and return the root node of the tree.

Solution -

# Definition for a  binary tree node
# class TreeNode:
#	def __init__(self, x):
#		self.val = x
#		self.left = None
#		self.right = None

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


class Solution:
	# @param A : list of integers
	# @param B : list of integers
	# @return the root node in the tree
	def buildTree(self, A, B):
        if not A or not B:
            return None

        root_val = B[-1]
        root = TreeNode(root_val)

        root_index = A.index(root_val)

        left_inorder = A[:root_index]
        right_inorder = A[root_index + 1:]

        left_postorder = B[:root_index]
        right_postorder = B[root_index:-1]

        root.left = self.buildTree(left_inorder, left_postorder)
        root.right = self.buildTree(right_inorder, right_postorder)

        return root

#######################################################################################################################

Q5. Symmetric Binary Tree

Problem Description
Given a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

Problem Constraints
1 <= number of nodes <= 105

Input Format
First and only argument is the root node of the binary tree.

Output Format
Return 0 / 1 ( 0 for false, 1 for true ).

Example Input
Input 1:
    1
   / \
  2   2
 / \ / \
3  4 4  3
Input 2:
    1
   / \
  2   2
   \   \
   3    3

Example Output
Output 1:
1
Output 2:
0

Example Explanation
Explanation 1:
The above binary tree is symmetric. 
Explanation 2:
The above binary tree is not symmetric.

Solution -

# Definition for a  binary tree node
# class TreeNode:
#	def __init__(self, x):
#		self.val = x
#		self.left = None
#		self.right = None


def treesym(root1,root2):
    if root1 is None and root2 is None:
        return True
    if root1 is None or root2 is None:
        return False
    if root1.val==root2.val:
        return treesym(root1.left,root2.right) and treesym(root1.right,root2.left)
    else:
        return False      


class Solution:
# @param A : root node of tree
# @return an integer
    def isSymmetric(self, A):
            x=treesym(A.left,A.right)
            if x is True:
                return 1
            else:
                return 0
        
#######################################################################################################################

Q6. Identical Binary Trees

Problem Description
Given two binary trees, check if they are equal or not.
Two binary trees are considered equal if they are structurally identical and the nodes have the same value.

Problem Constraints
1 <= number of nodes <= 105

Input Format
The first argument is a root node of the first tree, A.
The second argument is a root node of the second tree, B.

Output Format
Return 0 / 1 ( 0 for false, 1 for true ) for this problem.

Example Input
Input 1:
   1       1
  / \     / \
 2   3   2   3
Input 2:
   1       1
  / \     / \
 2   3   3   3

Example Output
Output 1:
 1
Output 2:
 0

Example Explanation
Explanation 1:
Both trees are structurally identical and the nodes have the same value.
Explanation 2:
Values of the left child of the root node of the trees are different.

Solution -

# Definition for a  binary tree node
# class TreeNode:
#	def __init__(self, x):
#		self.val = x
#		self.left = None
#		self.right = None

class Solution:
	# @param A : root node of tree
	# @param B : root node of tree
	# @return an integer
	def isSameTree(self, A, B):
        if A == None and B == None:
            return 1
        if A == None or B == None or A.val != B.val:
            return 0 
        return Solution.isSameTree(self,A.left,B.left) and Solution.isSameTree(self,A.right,B.right)    

#######################################################################################################################

Q7. Check for BST with One Child

Problem Description
Given preorder traversal of a binary tree, check if it is possible that it is also a preorder traversal of a Binary Search Tree (BST), where each internal node (non-leaf nodes) have exactly one child.

Problem Constraints
1 <= number of nodes <= 100000

Input Format
First and only argument is an integer array denoting the preorder traversal of binary tree.

Output Format
Return a string "YES" if true else "NO".

Example Input
Input 1:
A : [4, 10, 5, 8]
Input 2:
A : [1, 5, 6, 4]

Example Output
Output 1:
"YES"
Output 2:
"NO"

Example Explanation
Explanation 1:
The possible BST is:
          4
           \
           10
           /
           5
            \
            8
Explanation 2:
There is no possible BST which have the above preorder traversal.

Solution -

class Solution:
    # @param A : list of integers
    # @return a strings
    def solve(self, A):
        left_range = -sys.maxsize
        right_range = sys.maxsize
        # Adjust right and left range values by comparing the current node value with the previous node value
        for i in range(1, len(A)):
            if A[i] < A[i-1]:
                right_range = A[i-1]-1
            else:
                left_range = A[i-1]+1
            if A[i]>=left_range and A[i]<=right_range:
                continue
            return "NO"
        return "YES"    

#######################################################################################################################

Q8. BST nodes in a range

Problem Description
Given a binary search tree of integers. You are given a range B and C.
Return the count of the number of nodes that lie in the given range.

Problem Constraints
1 <= Number of nodes in binary tree <= 100000
0 <= B < = C <= 109

Input Format
First argument is a root node of the binary tree, A.
Second argument is an integer B.
Third argument is an integer C.

Output Format
Return the count of the number of nodes that lies in the given range.

Example Input
Input 1:
            15
          /    \
        12      20
        / \    /  \
       10  14  16  27
      /
     8

     B = 12
     C = 20
Input 2:
            8
           / \
          6  21
         / \
        1   7

     B = 2
     C = 20

Example Output
Output 1:
5
Output 2:
3

Example Explanation
Explanation 1:
Nodes which are in range [12, 20] are : [12, 14, 15, 20, 16]
Explanation 2:
Nodes which are in range [2, 20] are : [8, 6, 7]

Solution -

# Definition for a  binary tree node
# class TreeNode:
#    def __init__(self, x):
#        self.val = x
#        self.left = None
#        self.right = None

class Solution:
    # @param A : root node of tree
    # @param B : integer
    # @param C : integer
    # @return an integer
    def solve(self, A, B, C):
        if A == None:
            return 0
        if B <= A.val and A.val<=C:
            return 1+self.solve(A.left,B,C)+self.solve(A.right,B,C)
        elif A.val <= B:
            return self.solve(A.right,B,C)
        else:
            return self.solve(A.left,B,C)        

#######################################################################################################################

Q9. Two Sum BST

Problem Description
Given a binary search tree A, where each node contains a positive integer, and an integer B, you have to find whether or not there exist two different nodes X and Y such that X.value + Y.value = B.
Return 1 to denote that two such nodes exist. Return 0, otherwise.

Problem Constraints
1 <= size of tree <= 100000
1 <= B <= 109

Input Format
First argument is the head of the tree A.
Second argument is the integer B.

Output Format
Return 1 if such a pair can be found, 0 otherwise.

Example Input
Input 1:
         10
         / \
        9   20

B = 19
Input 2:
          10
         / \
        9   20

B = 40

Example Output
Output 1:
1
Output 2:
0

Example Explanation
Explanation 1:
10 + 9 = 19. Hence 1 is returned.
Explanation 2:
No such pair exists.

Solution -

# Definition for a  binary tree node
# class TreeNode:
#	def __init__(self, x):
#		self.val = x
#		self.left = None
#		self.right = None



class Solution:
	# @param A : root node of tree
	# @param B : integer
	# @return an integer
    def preorder(self, A, arr, B):
        if A == None:
            return 0
        if B - A.val in arr:
            return 1
        arr.add(A.val)
        return (self.preorder(A.left, arr, B) or self.preorder(A.right, arr, B))

    def t2Sum(self, A, B):
        arr = set()
        return self.preorder(A, arr, B)

#######################################################################################################################

Q10. Sorted Array To Balanced BST

Problem Description
Given an array where elements are sorted in ascending order, convert it to a height Balanced Binary Search Tree (BBST).
Balanced tree : a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Problem Constraints
1 <= length of array <= 100000

Input Format
First argument is an integer array A.

Output Format
Return a root node of the Binary Search Tree.

Example Input
Input 1:
A : [1, 2, 3]
Input 2:
A : [1, 2, 3, 5, 10]

Example Output
Output 1:
    2
  /   \
   1     3
Output 2:
      3
    /   \
   2     5
  /       \
 1         10

Example Explanation
Explanation 1:
You need to return the root node of the Binary Tree.

Solution -

# Definition for a  binary tree node
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    # @param A : tuple of integers
    # @return the root node in the tree
    def sortedArrayToBST(self, A):        
        def dfs(arr,l,r):
            if l >= r:
                return None
            
            root_indx = (l+r)//2
            
            root = TreeNode(arr[root_indx])
            
            root.left = dfs(arr,l,root_indx)
            root.right = dfs(arr,root_indx+1,r)
            
            return root
        
        return dfs(A,0,len(A))

#######################################################################################################################

Q11. Valid Binary Search Tree

Problem Description
You are given a binary tree represented by root A. You need to check if it is a Binary Search Tree or not.
Assume a BST is defined as follows:
1) The left subtree of a node contains only nodes with keys less than the node's key.
2) The right subtree of a node contains only nodes with keys greater than the node's key.
3) Both the left and right subtrees must also be binary search trees.

Problem Constraints
1 <= Number of nodes in binary tree <= 105
0 <= node values <= 232-1

Input Format
First and only argument is head of the binary tree A.

Output Format
Return 0 if false and 1 if true.

Example Input
Input 1: 
   1
  /  \
 2    3
Input 2:
  2
 / \
1   3

Example Output
Output 1:
0
Output 2:
1

Example Explanation
Explanation 1:
2 is not less than 1 but is in left subtree of 1.
Explanation 2:
Satisfies all conditions.

Solution -

# Definition for a  binary tree node
# class TreeNode:
#	def __init__(self, x):
#		self.val = x
#		self.left = None
#		self.right = None
class Solution:
    # @param A : root node of tree
    # @return an integer
    def helper(self,A,res):
        if A is None:
            return []
        self.helper(A.left,res)
        res.append(A.val)
        self.helper(A.right,res)
       
    def inOrder(self,A):
        res = []
        self.helper(A,res)
        return res        

    def isValidBST(self, A):
        res = self.inOrder(A)
        n = len(res)
        temp = res[0]
        for i in range(1,n):
            if res[i]<= temp:
               return 0
            temp = res[i]
        return 1

#######################################################################################################################

Q12. Largest BST Subtree

Problem Description
You are given a Binary Tree A with N nodes.
Write a function that returns the size of the largest subtree, which is also a Binary Search Tree (BST).
If the complete Binary Tree is BST, then return the size of the whole tree.
NOTE:
The largest subtree is the subtree with the most number of nodes.

Problem Constraints
1 <= N <= 105

Input Format
First and only argument is an pointer to root of the binary tree A.

Output Format
Return an single integer denoting the size of the largest subtree which is also a BST.

Example Input
Input 1:
     10
    / \
   5  15
  / \   \ 
 1   8   7
Input 2:
     5
    / \
   3   8
  / \ / \
 1  4 7  9

Example Output
Output 1:
3
Output 2:
7

Example Explanation
Explanation 1:
Largest BST subtree is
                          5
                         / \
                        1   8
Explanation 2:
 Given binary tree itself is BST.

Solution -

# Definition for a  binary tree node
# class TreeNode:
#    def __init__(self, x):
#        self.val = x
#        self.left = None
#        self.right = None

class Solution:
    # @param A : root node of tree
    # @return an integer
    def size(A):
        if A == None:
            return 0
        return Solution.size(A.left)+Solution.size(A.right)+1

    def is_bst(A):
        if A == None:
            return True
        if A.left and A.left.val > A.val:
            return False
        if A.right and A.right.val < A.val:
           return False
        return Solution.is_bst(A.left) and Solution.is_bst(A.right)


    def solve(self, A):
        if Solution.is_bst(A):
            return Solution.size(A)    
        return max(Solution.solve(self,A.left), Solution.solve(self,A.right))
