Q1. Stairs

Problem Description
You are climbing a staircase and it takes A steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
Return the number of distinct ways modulo 1000000007

Problem Constraints
1 <= A <= 105

Input Format
The first and the only argument contains an integer A, the number of steps.

Output Format
Return an integer, representing the number of ways to reach the top.

Example Input
Input 1:
A = 2
Input 2:
A = 3

Example Output
Output 1:
2
Output 2:
3

Example Explanation
Explanation 1:
Distinct ways to reach top: [1, 1], [2].
Explanation 2:
Distinct ways to reach top: [1 1 1], [1 2], [2 1].

Solution -

class Solution:
    # @param A : integer
    # @return an integer
    def climbStairs(self, A):
        #Recursive Solution
        '''
        mod = pow(10,9)+7
        li = [None for i in range(A+1)]
        def ways(n):
            if n <= 1: 
                return 1
            if li[n] != None: 
                return li[n]
            ans = ways(n-1) + ways(n-2)
            li[n] = ans
            return ans % mod
        return ways(A)
        '''
        #DP Solution(Memoization)
        mod = pow(10,9)+7
        li = [None for i in range(A+1)]
        li[0] = 1
        li[1] = 1
        for i in range(2,A+1):
            li[i] = (li[i-1]+li[i-2]) % mod
        return li[A]

#####################################################################################################################

Q2. Fibonacci Number

Problem Description
Given a positive integer A, write a program to find the Ath Fibonacci number.
In a Fibonacci series, each term is the sum of the previous two terms and the first two terms of the series are 0 and 1. i.e. f(0) = 0 and f(1) = 1. Hence, f(2) = 1, f(3) = 2, f(4) = 3 and so on.
NOTE: 0th term is 0. 1th term is 1 and so on.

Problem Constraints
0 <= A <= 44

Input Format
First and only argument is an integer A.

Output Format
Return an integer denoting the Ath Fibonacci number.

Example Input
Input 1:
A = 4
Input 2:
A = 6

Example Output
Output 1:
3
Output 2:
8

Example Explanation
Explanation 1:
Terms of Fibonacci series are: 0, 1, 1, 2, 3, 5, 8, 13, 21 and so on.
0th term is 0 So, 4th term of Fibonacci series is 3. 
Explanation 2:
6th term of Fibonacci series is 8.

Solution -

def main():
    num = int(input())
    febList = [None for i in range(num+1)]
    def feb(n):
        if n <= 1:
            return n
        if febList[n] != None:
            return febList[n]
        ans = feb(n-1)+feb(n-2)
        febList[n] = ans
        return ans
    print(feb(num))
    return 0

if __name__ == '__main__':
    main()

#####################################################################################################################

Q3. Minimum Number of Squares

Problem Description
Given an integer A. Return minimum count of numbers, sum of whose squares is equal to A.

Problem Constraints
1 <= A <= 105

Input Format
First and only argument is an integer A.

Output Format
Return an integer denoting the minimum count.

Example Input
Input 1:
A = 6
Input 2:
A = 5

Example Output
Output 1:
3
Output 2:
2

Example Explanation
Explanation 1:
Possible combinations are : (12 + 12 + 12 + 12 + 12 + 12) and (12 + 12 + 22).
Minimum count of numbers, sum of whose squares is 6 is 3. 
Explanation 2:
We can represent 5 using only 2 numbers i.e. 12 + 22 = 5

Solution -

import sys

class Solution:
    def countMinSquares(self, A):
        dp = [i for i in range(A+1)]
    #   dp[0]=0
        for i in range(1,A+1):
            for j in range(1,int(math.sqrt(i)+1)):
                dp[i]=min(dp[i],1+dp[i-j*j])
            # dp[i]=min_v
        
        return dp[A]
    
#####################################################################################################################

Q4. Let's Party

Problem Description
In Danceland, one person can party either alone or can pair up with another person.
Can you find in how many ways they can party if there are A people in Danceland?
Note: Return your answer modulo 10003, as the answer can be large.

Problem Constraints
1 <= A <= 105

Input Format
Given only argument A of type Integer, number of people in Danceland.

Output Format
Return an integer denoting the number of ways people of Danceland can party.

Example Input
Input 1:
A = 3
Input 2:
A = 5

Example Output
Output 1:
4
Output 2:
26

Example Explanation
Explanation 1:
Let suppose three people are A, B, and C. There are only 4 ways to party
(A, B, C) All party alone
(AB, C) A and B party together and C party alone
(AC, B) A and C party together and B party alone
(BC, A) B and C party together and A
here 4 % 10003 = 4, so answer is 4.
Explanation 2:
Number of ways they can party are: 26.

Solution -

import sys
sys.setrecursionlimit(10**6)
modulo = 10003

class Solution:
    # @param A : integer
    # @return an integer
    def solve(self, A):
        if A == 1:
            return 1
        dp = [-1]*(A+1)
        dp[0] = 0
        dp[1] = 1
        dp[2] = 2
        for i in range(3,A+1):
            dp[i] = (dp[i-1]+(i-1)%10003*dp[i-2]%10003)%10003
        return dp[A]%10003

#####################################################################################################################

Q5. Dice throw

Problem Description
Given sum A, number of ways you can get that sum with dice roll[1-6].
As the number of ways can be large return its modulo by 1e9 + 7.

Problem Constraints
1 <= A <= 10 2

Input Format
The first argument is the integer A.

Output Format
Return an integer

Example Input
Input 1:
A = 3
Input 2:
A = 4

Example Output
Output 1:
4
Output 2:
8

Example Explanation
Explanation 1:
The four possible ways to obtain 3 are: [1, 1, 1], [1, 2], [2, 1] and [3].
Explanation 2:
The eight possible ways to obrain 8 are: [1, 1, 1, 1], [1, 1, 2], [1, 2, 1], [2, 1, 1], [1, 3], [3, 1], [2, 2], [4].

Solution -

class Solution:
    # @param A : integer
    # @return an integer
    def solve(self, A):
        dp = [0 for i in range(A + 1)]
        dp[0] = 1
        mod = 1000000007
        for i in range(1, A+1):
            dp[i] = 0
            for j in range(1, 7):
                if i >= j:
                    dp[i] = (dp[i] + dp[i - j])%mod
        
        return dp[A]

#####################################################################################################################

Q6. Unique Paths in a Grid

Problem Description
Given a grid of size n * m, lets assume you are starting at (1,1) and your goal is to reach (n, m). 
At any instance, if you are on (x, y), you can either go to (x, y + 1) or (x + 1, y).
Now consider if some obstacles are added to the grids. 
Return the total number unique paths from (1, 1) to (n, m).
Note: 
1. An obstacle is marked as 1 and empty space is marked 0 respectively in the grid.
2. Given Source Point and Destination points are 1-based index.

Problem Constraints
1 <= n, m <= 100
A[i][j] = 0 or 1

Input Format
Firts and only argument A is a 2D array of size n * m.

Output Format
Return an integer denoting the number of unique paths from (1, 1) to (n, m).

Example Input
Input 1:
A = [
      [0, 0, 0]
      [0, 1, 0]
      [0, 0, 0]
   ]
Input 2:
A = [
        [0, 0, 0]
        [1, 1, 1]
        [0, 0, 0]
     ]

Example Output
Output 1:
2
Output 2:
0

Example Explanation
Explanation 1:
Possible paths to reach (n, m): {(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)} and {(1 ,1), (2, 1), (3, 1), (3, 2), (3, 3)}  
So, the total number of unique paths is 2. 
Explanation 2:
It is not possible to reach (n, m) from (1, 1). So, ans is 0.

Solution -

class Solution:
    # @param A : list of list of integers
    # @return an integer
    def helper(self, A, dp, r, c):
        if r < 0 or c < 0:
            return 0

        if A[r][c] == 1:
            dp[r][c] = 0
            return dp[r][c]

        if r == 0 and c == 0:
            dp[r][c] = 1
            return dp[r][c]

        if dp[r][c] != -1:
            return dp[r][c]

        dp[r][c] = self.helper(A, dp, r - 1, c) + self.helper(A, dp, r, c - 1)
        return dp[r][c]

    def uniquePathsWithObstacles(self, A):
        n = len(A)
        m = len(A[0])

        dp = [[-1] * m for _ in range(n)]

        return self.helper(A, dp, n - 1, m - 1)

#####################################################################################################################

Q7. Min Sum Path in Matrix

Problem Description
Given a M x N grid A of integers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.
Return the minimum sum of the path.
NOTE: You can only move either down or right at any point in time.

Problem Constraints
1 <= M, N <= 2000
-1000 <= A[i][j] <= 1000

Input Format
First and only argument is a 2-D grid A.

Output Format
Return an integer denoting the minimum sum of the path.

Example Input
Input 1:
A = [
     [1, 3, 2]
     [4, 3, 1]
     [5, 6, 1]
   ]
Input 2:
A = [
     [1, -3, 2]
     [2, 5, 10]
     [5, -5, 1]
   ]

Example Output
Output 1:
8
Output 2:
-1

Example Explanation
Explanation 1:
The path will be: 1 -> 3 -> 2 -> 1 -> 1.
Input 2:
The path will be: 1 -> -3 -> 5 -> -5 -> 1.

Solution -

import sys
sys.setrecursionlimit(10 ** 6)

class Solution:
    # @param A : list of list of integers
    # @return an integer
    def minPathSum(self, A):
        n = len(A)
        m = len(A[0])

        dp = [[-1] * m for _ in range(n)]

        self.getPathSum(dp, A, n-1, m-1)
        return dp[n-1][m-1]

    def getPathSum(self, dp, A, i, j):
        if i < 0 or j < 0:
            return float('inf')
        
        if i == 0 and j == 0:
            dp[i][j] = A[i][j]
            return dp[i][j]
        
        if dp[i][j] == -1:
            dp[i][j] = min(self.getPathSum(dp, A, i-1, j), self.getPathSum(dp, A, i, j-1)) + A[i][j]

        return dp[i][j]

#####################################################################################################################

Q8. 0-1 Knapsack

Problem Description
Given two integer arrays A and B of size N each which represent values and weights associated with N items respectively.
Also given an integer C which represents knapsack capacity.
Find out the maximum value subset of A such that sum of the weights of this subset is smaller than or equal to C.
NOTE:
You cannot break an item, either pick the complete item, or don’t pick it (0-1 property).

Problem Constraints
1 <= N <= 103
1 <= C <= 103
1 <= A[i], B[i] <= 103

Input Format
First argument is an integer array A of size N denoting the values on N items.
Second argument is an integer array B of size N denoting the weights on N items.
Third argument is an integer C denoting the knapsack capacity.

Output Format
Return a single integer denoting the maximum value subset of A such that sum of the weights of this subset is smaller than or equal to C.

Example Input
Input 1:
A = [60, 100, 120]
B = [10, 20, 30]
C = 50
Input 2:
A = [10, 20, 30, 40]
B = [12, 13, 15, 19]
C = 10

Example Output
Output 1:
220
Output 2:
0

Example Explanation
Explanation 1:
Taking items with weight 20 and 30 will give us the maximum value i.e 100 + 120 = 220
Explanation 2:
Knapsack capacity is 10 but each item has weight greater than 10 so no items can be considered in the knapsack therefore answer is 0.

Solution -

import sys
sys.setrecursionlimit(10**6)

class Solution:
    # @param A : list of integers
    # @param B : list of integers
    # @param C : integer
    # @return an integer
    def solve(self, A, B, C):
        n = len(A)

        k = C
        dp = []
        for i in range(n):
            l = [-1]*(k+1)
            dp.append(l)

        def maxv(w,v,i,j):
            if (i < 0) or (j == 0):
                return 0
            if dp[i][j] == -1:
                a = maxv(w,v,i-1,j)
                if j-w[i]>=0:
                    a = max(a,maxv(w,v,i-1,j-w[i])+v[i])

                dp[i][j] = a

            return dp[i][j]        

        return maxv(B,A,n-1,k)
#####################################################################################################################

Q9. Unbounded Knapsack

Problem Description
Given a knapsack weight A and a set of items with certain value B[i] and weight C[i], we need to calculate maximum amount that could fit in this quantity.
This is different from classical Knapsack problem, here we are allowed to use unlimited number of instances of an item.

Problem Constraints
1 <= A <= 1000
1 <= |B| <= 1000
1 <= B[i] <= 1000
1 <= C[i] <= 1000

Input Format
First argument is the Weight of knapsack A
Second argument is the vector of values B
Third argument is the vector of weights C

Output Format
Return the maximum value that fills the knapsack completely

Example Input
Input 1:
A = 10
B = [5]
C = [10]
Input 2:
A = 10
B = [6, 7]
C = [5, 5]

Example Output
Output 1:
5
Output 2:
14

Example Explanation
Explanation 1:
Only valid possibility is to take the given item.
Explanation 2:
Take the second item twice.

Solution -

import sys
sys.setrecursionlimit(10**6)

class Solution:
    # @param A : integer
    # @param B : list of integers
    # @param C : list of integers
    # @return an integer
    def solve(self, A, B, C):
        n = len(B)

        k = A
        dp = []
        for i in range(n):
            l = [-1]*(k+1)
            dp.append(l)

        def maxv(w,v,i,j):
            if (i < 0) or (j == 0):
                return 0
            if dp[i][j] == -1:
                a = maxv(w,v,i-1,j)
                if j-w[i]>=0:
                    a = max(a,maxv(w,v,i,j-w[i])+v[i])

                dp[i][j] = a

            return dp[i][j]        

        return maxv(C,B,n-1,k)

#####################################################################################################################

Q10. Fractional Knapsack

Problem Description
Given two integer arrays A and B of size N each which represent values and weights associated with N items respectively.
Also given an integer C which represents knapsack capacity.
Find out the maximum total value that we can fit in the knapsack. If the maximum total value is ans, then return ⌊ans × 100⌋ , i.e., floor of (ans × 100).
NOTE:
You can break an item for maximizing the total value of the knapsack

Problem Constraints
1 <= N <= 105
1 <= A[i], B[i] <= 103
1 <= C <= 103

Input Format
First argument is an integer array A of size N denoting the values on N items.
Second argument is an integer array B of size N denoting the weights on N items.
Third argument is an integer C denoting the knapsack capacity.

Output Format
Return a single integer denoting the maximum total value of A such that sum of the weights of this subset is smaller than or equal to C.

Example Input
Input 1:
A = [60, 100, 120]
B = [10, 20, 30]
C = 50
Input 2:
A = [10, 20, 30, 40]
B = [12, 13, 15, 19]
C = 10

Example Output
Output 1:
24000
Output 2:
2105

Example Explanation
Explanation 1:
Taking the full items with weight 10 and 20 and 2/3 of the item with weight 30 will give us 
the maximum value i.e 60 + 100 + 80 = 240. So we return 24000.
Explanation 2:
Taking 10/19 the fourth item gives us the maximum value i.e. 21.0526. So we return 2105.

Solution -

class Solution:
    # @param A : list of integers
    # @param B : list of integers
    # @param C : integer
    # @return an integer
    def solve(self, A, B, C):
        n = len(A)
        vp = []
        for i in range(n):
            temp = A[i] / B[i]
            vp.append((temp, i))
        vp.sort()
        ans = 0;
        for i in range(n - 1, -1, -1):
            if(C == 0):
                break
            idx = vp[i][1]
            wt = min(C, B[idx])
            C -= wt
            ans += vp[i][0] * wt
        ans *= 1000
        return (int)(ans / 10)

#####################################################################################################################

Q11. Buying Candies

Problem Description
Rishik likes candies a lot. So, he went to a candy-shop to buy candies.
The shopkeeper showed him N packets each containg A[i] candies for cost of C[i] nibbles, each candy in that packet has a sweetness B[i]. The shopkeeper puts the condition that Rishik can buy as many complete candy-packets as he wants but he can't buy a part of the packet.
Rishik has D nibbles, can you tell him the maximum amount of sweetness he can get from candy-packets he will buy?

Problem Constraints
1 <= N <= 700
1 <= A[i] <= 1000
1 <= B[i] <= 1000
1 <= C[i],D <= 1000

Input Format
First argument of input is an integer array A
Second argument of input is an integer array B
Third argument of input is an integer array C
Fourth argument of input is an integer D

Output Format
Return a single integer denoting maximum sweetness of the candies that he can buy

Example Input
Input 1:
A = [1, 2, 3]
B = [2, 2, 10]
C = [2, 3, 9]
D = 8
Input 2:
A = [2]
B = [5]
C = [10]
D = 99

Example Output
Output 1:
10
Output 2:
90

Example Explanation
Explanation 1:
Choose 1 Packet of kind 1 = 1 Candy of 2 Sweetness = 2 Sweetness
Choose 2 Packet of kind 2 = 2 Candy of 2 Sweetness = 8 Sweetness
Explanation 2:
Buy 9 Packet of kind 1. 18 Candy each of 5 Sweetness = 90 Sweetness

Solution -

import sys
sys.setrecursionlimit(10**6)

class Solution:
    # @param A : list of integers
    # @param B : list of integers
    # @param C : list of integers
    # @param D : integer
    # @return an integer
    def solve(self, A, B, C, D):
        n = len(A)
        sweetness=[A[i]*B[i] for i in range(n)]

        k = D
        dp = []
        for i in range(n):
            l = [-1]*(k+1)
            dp.append(l)

        def maxv(w,v,i,j):
            if (i < 0) or (j == 0):
                return 0
            if dp[i][j] == -1:
                a = maxv(w,v,i-1,j)
                if j-w[i]>=0:
                    a = max(a,maxv(w,v,i,j-w[i])+v[i])

                dp[i][j] = a

            return dp[i][j]        

        return maxv(C,sweetness,n-1,k)

#####################################################################################################################

Q12. Tushar's Birthday Party

Problem Description
As it is Tushar's Birthday on March 1st, he decided to throw a party to all his friends at TGI Fridays in Pune. Given are the eating capacity of each friend, filling capacity of each dish and cost of each dish. A friend is satisfied if the sum of the filling capacity of dishes he ate is equal to his capacity. Find the minimum cost such that all of Tushar's friends are satisfied (reached their eating capacity).
NOTE:
Each dish is supposed to be eaten by only one person. Sharing is not allowed.
Each friend can take any dish unlimited number of times.
There always exists a dish with filling capacity 1 so that a solution always exists.

Problem Constraints
|A| <= 1000
|B| <= 1000
|C| <= 1000

Input Format
First Argument is vector A, denoting eating capacities
Second Argument is vector B, denoting filling capacities
Third Argument is vector C, denoting cost

Output Format
Return a single integer, the answer to the problem

Example Input
Input 1:
A = [2, 4, 6]
B = [2, 1, 3]
C = [2, 5, 3]
Input 2:
A = [2]
B = [1]
C = [2]

Example Output
Output 1:
12
Output 2:
4

Example Explanation
Explanation 1:
First friend takes dish 1, Second friend takes dish 1 twice and third friend takes dish 3 twice.
So 2 + 2*2 + 3*2 = 12.
Explanation 2:
Only way is to take 2 dishes of cost 2, hence 4.

Solution -

class Solution:
	# @param A : tuple of integers
	# @param B : tuple of integers
	# @param C : tuple of integers
	# @return an integer
	def solve(self, A, B, C):

        max_appetite = max(A)
        N = len(B)

        dp = [float('inf')]*(max_appetite+1)
        dp[0] = 0

        for i in range(N):
            for j in range(B[i], max_appetite+1):
                dp[j] = min(dp[j], C[i] + dp[j-B[i]])

        min_cost = 0
        for capacity in A:
            min_cost += dp[capacity]
        return min_cost
