Q1. Subarray with given sum

Problem Description
Given an array of positive integers A and an integer B, find and return first continuous subarray which adds to B.
If the answer does not exist return an array with a single integer "-1".
First sub-array means the sub-array for which starting index in minimum.

Problem Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 109
1 <= B <= 109

Input Format
The first argument given is the integer array A.
The second argument given is integer B.

Output Format
Return the first continuous sub-array which adds to B and if the answer does not exist return an array with a single integer "-1".

Example Input
Input 1:
A = [1, 2, 3, 4, 5]
B = 5
Input 2:
A = [5, 10, 20, 100, 105]
B = 110

Example Output
Output 1:
[2, 3]
Output 2:
[-1]

Example Explanation
Explanation 1:
[2, 3] sums up to 5.
Explanation 2:
No subarray sums up to required number.

Solution -

class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return a list of integers
    def solve(self, A, B):
        pfa = []
        n = len(A)
        s = 0
        for i in range(n):
            s = s+A[i]
            pfa.append(s)

        i = 0
        j = 1

        if A[0] == B:
            return A[0:1]

        while i<n and j <n:
            if i == 0:
                if pfa[j] < B:
                    j += 1
                elif pfa[j] > B:
                    i += 1
                else:
                    return A[i:j+1]
            else:
                if pfa[j]-pfa[i-1] < B:
                    j += 1
                elif pfa[j]-pfa[i-1] > B:
                    i += 1
                else:
                    return A[i:j+1]

        return [-1]

#########################################################################################################################

Q2. Pairs with Given Difference

Problem Description
Given an one-dimensional integer array A of size N and an integer B.
Count all distinct pairs with difference equal to B.
Here a pair is defined as an integer pair (x, y), where x and y are both numbers in the array and their absolute difference is B.

Problem Constraints
1 <= N <= 104
0 <= A[i], B <= 105

Input Format
First argument is an one-dimensional integer array A of size N.
Second argument is an integer B.

Output Format
Return an integer denoting the count of all distinct pairs with difference equal to B.

Example Input
Input 1:
A = [1, 5, 3, 4, 2]
B = 3
Input 2:
A = [8, 12, 16, 4, 0, 20]
B = 4
Input 3:
A = [1, 1, 1, 2, 2]
B = 0

Example Output
Output 1:
2
Output 2:
5
Output 3:
2

Example Explanation
Explanation 1:
There are 2 unique pairs with difference 3, the pairs are {1, 4} and {5, 2} 
Explanation 2:
There are 5 unique pairs with difference 4, the pairs are {0, 4}, {4, 8}, {8, 12}, {12, 16} and {16, 20} 
Explanation 3:
There are 2 unique pairs with difference 0, the pairs are {1, 1} and {2, 2}.

Solution -

class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        p1=0
        p2=1
        pair=0
        n=len(A)
        A.sort()
        k=0
        dup=0
        while(p2<n and p1<n):
            if p1==p2:
                p2=p2+1
            
            while(p1<n and p2<n and A[p1]==A[p2]):
                p1=p1+1
                p2=p2+1
                k=1
                # pair=pair+1
            dup=dup+k
            while(p1<n-1 and A[p1]==A[p1+1]):
                    p1=p1+1
            while(p2<n-1 and A[p2]==A[p2+1]):
                    p2=p2+1
            if (p2<n and p1<n and p1!=p2):
                diff=abs(A[p2]-A[p1])
                # print(diff)
                    
                if diff==B and B!=0:
                    pair=pair+1
                    p1=p1+1
                 
                elif diff<B:
                    p2=p2+1
                else:
                    p1=p1+1
            if B==0:
                pair=dup
                k=0

        return pair

#########################################################################################################################

Q3. Container With Most Water

Problem Description
Given N non-negative integers A[0], A[1], ..., A[N-1] , where each represents a point at coordinate (i, A[i]).
N vertical lines are drawn such that the two endpoints of line i is at (i, A[i]) and (i, 0).
Find two lines, which together with x-axis forms a container, such that the container contains the most water. You need to return this maximum area.
Note: You may not slant the container. It is guaranteed that the answer will fit in integer limits.

Problem Constraints
1 <= N <= 105
1 <= A[i] <= 105

Input Format
Single Argument representing a 1-D array A.

Output Format
Return single Integer denoting the maximum area you can obtain.

Example Input
Input 1:
A = [1, 5, 4, 3]
Input 2:

A = [1]
Example Output
Output 1:
6
Output 2:
0

Example Explanation
Explanation 1:
5 and 3 are distance 2 apart. So size of the base = 2. Height of container = min(5, 3) = 3. 
So total area = 3 * 2 = 6
Explanation 2:
No container is formed.

Solution -

class Solution:
	# @param A : list of integers
	# @return an integer
	def maxArea(self, A):
        n = len(A)
        if n == 1:
            return 0

        ans = 0
        i = 0
        j = n-1
        while i<j:
            h = min(A[i],A[j])
            w = j-i
            area = h*w
            ans = max(ans,area)
            if A[i]>A[j]:
                j -= 1
            else:
                i += 1

        return ans

#########################################################################################################################

Q4. 3 Sum Zero

Problem Description
Jerry is excited about an array that Tom gave him. The array A consists of N integers.
Tom challenges Jerry to find all such unique triplets a, b, c in A such that a + b = - c.
Note:
Elements in a triplet (a,b,c) must be in non-decreasing order. (ie, a ≤ b ≤ c)
The solution set must not contain duplicate triplets.

Problem Constraints
0 <= N <= 7000
-108 <= A[i] <= 108

Input Format
Single argument representing a 1-D array A.

Output Format
Output a 2-D vector where each row represent a unique triplet.

Example Input
Input 1:
A = [-5, 2, 1, 3]
Input 2:
A = [-1, 0, 1, 2, -1, 4]

Example Output
Output 1:
[[-5, 2, 3]]
Output 2:
[[-1,0,1],
 [-1,-1,2] ]

Example Explanation
Explanation 1:
Out of all the possible triplets, the triplet (-5, 2, 3) only satisfies the condition, which is in the form [ (-5) + (2) = - (3) ]
Explanation 2:
Out of all the possible triplets only the above two triplets satisfies the condition and unique.

Solution -

class Solution:
	# @param A : list of integers
	# @return a list of list of integers
	def threeSum(self, A):
        A.sort()
		n=len(A)
		l1=[]

		for i in range(n):
			x=A[i]
			l=i+1
			r=n-1
			while(l<r):
				if (x+A[l]+A[r]==0):
					l2=[x,A[l],A[r]]
					if l2 not in l1:
						l1.append(l2)
					l=l+1
					r=r-1
					
				elif(x+A[l]+A[r]<0):
					l=l+1
				else:
					r=r-1
		return l1

#########################################################################################################################

Q5. Pairs with given sum II

Problem Description
Given a sorted array of integers (not necessarily distinct) A and an integer B, find and return how many pair of integers ( A[i], A[j] ) such that i != j have sum equal to B.
Since the number of such pairs can be very large, return number of such pairs modulo (109 + 7).

Problem Constraints
1 <= |A| <= 100000
1 <= A[i] <= 10^9
1 <= B <= 10^9

Input Format
The first argument given is the integer array A.
The second argument given is integer B.

Output Format
Return the number of pairs for which sum is equal to B modulo (10^9+7).

Example Input
Input 1:
A = [1, 1, 1]
B = 2
Input 2:
A = [1, 5, 7, 10]
B = 8

Example Output
Output 1:
3
Output 2:
1

Example Explanation
Explanation 1:
The pairs of A[i] and A[j] which sum up to 2 are (0, 1), (0, 2) and (1, 2).
There are 3 pairs.
Explanation 2:
There is only one pair, such that i = 0, and j = 2 sums up to 8.

Solution -

class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        n = len(A)
        i = 0
        j = n-1
        ans = 0
        k1=1
        k2=1
        while i<j:
            while A[i]==A[i+1] and i+1!=j:
                i=i+1
                k1=k1+1                
            while A[j]==A[j-1] and j-1!= i:
                j=j-1
                k2=k2+1
            if k1==n-1:
                break

            if A[i] + A[j] == B:
                ans =ans + k1*k2
                i=i+1
                j=j-1
                k1=1
                k2=1           
            elif A[i] + A[j] > B:
                j -= 1
                k2=1
            else:
                i += 1
                k1=1
        if k1==n-1 and 2*A[i]==B:
            ans+=n*(n-1)//2
        elif 2*A[i]==B:
            ans+=(k1*(k1-1))//2
        elif 2*A[j]==B:
            ans+=(k2*(k2-1))//2
        return ans%1000000007

#########################################################################################################################

Q6. Count of pairs with the given sum

Given a sorted array of distinct integers A and an integer B, find and return how many pair of integers ( A[i], A[j] ) such that i != j have sum equal to B.

Input Format
The first argument given is the integer array A.
The second argument given is integer B.

Output Format
Return the number of pairs for which sum is equal to B.

Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 10^9 
1 <= B <= 10^9

For Example
Input 1:
A = [1, 2, 3, 4, 5]
B = 5
Output 1:
2

Input 2:
A = [5, 10, 20, 100, 105]
B = 110
Output 2:
2

Solution -

class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        n = len(A)
        i = 0
        j = n-1
        ans = 0
        while i<j:
            if A[i] + A[j] == B:
                ans += 1
                i += 1
                j=j-1
            elif A[i] + A[j] > B:
                j -= 1
            else:
                i += 1

        return ans

#########################################################################################################################

Q7. Another Count Rectangles

Problem Description
Given a sorted array of distinct integers A and an integer B, find and return how many rectangles with distinct configurations can be created using elements of this array as length and breadth whose area is lesser than B.
(Note that a rectangle of 2 x 3 is different from 3 x 2 if we take configuration into view)

Problem Constraints
1 <= |A| <= 100000
1 <= A[i] <= 109
1 <= B <= 109

Input Format
The first argument given is the integer array A.
The second argument given is integer B.

Output Format
Return the number of rectangles with distinct configurations with area less than B modulo (109 + 7).

Example Input
Input 1:
A = [1, 2]
B = 5
Input 2:
A = [1, 2]
B = 1

Example Output
Output 1:
4
Output 2:
0

Example Explanation
Explanation 1:
All 1X1, 2X2, 1X2 and 2X1 have area less than 5.
Explanation 2:
No Rectangle is valid.

Solution -

class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        lenA= len(A)
        start,end = 0,lenA-1
        modulo = 1000000007
        count = 0

        while end>=0 and start<lenA:
            area = A[start] * A[end]
         
            if area<B :
                count +=(end+1)
                start +=1
            else:
                end -=1
            count %= modulo

        return count%modulo
