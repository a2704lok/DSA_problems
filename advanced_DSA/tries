Q1. Spelling Checker

Problem Description
Given an array of words A (dictionary) and another array B (which contain some words).
You have to return the binary array (of length |B|) as the answer where 1 denotes that the word is present in the dictionary and 0 denotes it is not present.
Formally, for each word in B, you need to return 1 if it is present in Dictionary and 0 if not.
Such problems can be seen in real life when we work on any online editor (like Google Documnet), if the word is not valid it is underlined by a red line.
NOTE: Try to do this in O(n) time complexity.

Problem Constraints
1 <= |A| <= 1000
1 <= sum of all strings in A <= 50000
1 <= |B| <= 1000

Input Format
First argument is array of strings A.
First argument is array of strings B.

Output Format
Return the binary array of integers according to the given format.

Example Input
Input 1:
A = [ "hat", "cat", "rat" ]
B = [ "cat", "ball" ]
Input 2:
A = [ "tape", "bcci" ]
B = [ "table", "cci" ]

Example Output
Output 1:
[1, 0]
Output 2:
[0, 0]

Example Explanation
Explanation 1:
Only "cat" is present in the dictionary.
Explanation 2:
None of the words are present in the dictionary.

Solution -

from collections import defaultdict

class TrieNode():
    def __init__(self):
        self.children = defaultdict()
        self.terminating = False


class Trie():
    def __init__(self):
        self.root = self.get_node()
        
    def get_node(self):
        return TrieNode()
    
    def get_index(self, ch):
        return ord(ch) - ord('a')
    
    def insert(self, word):
        root = self.root
        len1 = len(word)
        for i in range(len1):
            index = self.get_index(word[i])
            if index not in root.children:
                root.children[index] = self.get_node()
            root = root.children.get(index)
        root.terminating = True
    
    def search(self, word):
        root = self.root
        len1 = len(word)
        for i in range(len1):
            index = self.get_index(word[i])
            if not root:
                return False
            root = root.children.get(index)
        return True if root and root.terminating else False


class Solution:
    # @param A : list of strings
    # @param B : list of strings
    # @return a list of integers
    def solve(self, A, B):
        t = Trie()
        for i in A:
            t.insert(i)
        ans = [0 for i in range(len(B)) ]
        for i in range(len(B)):
            if(t.search(B[i]) == True):
                ans[i] = 1
        return ans

##########################################################################################################################

Q2. Shortest Unique Prefix

Problem Description
Given a list of N words, find the shortest unique prefix to represent each word in the list.
NOTE: Assume that no word is the prefix of another. In other words, the representation is always possible

Problem Constraints
1 <= Sum of length of all words <= 106

Input Format
First and only argument is a string array of size N.

Output Format
Return a string array B where B[i] denotes the shortest unique prefix to represent the ith word.

Example Input
Input 1:
A = ["zebra", "dog", "duck", "dove"]
Input 2:
A = ["apple", "ball", "cat"]

Example Output
Output 1:
["z", "dog", "du", "dov"]
Output 2:
["a", "b", "c"]

Example Explanation
Explanation 1:
Shortest unique prefix of each word is:
For word "zebra", we can only use "z" as "z" is not any prefix of any other word given.
For word "dog", we have to use "dog" as "d" and "do" are prefixes of "dov".
For word "du", we have to use "du" as "d" is prefix of "dov" and "dog".
For word "dov", we have to use "dov" as "d" and do" are prefixes of "dog".  
Explanation 2:
"a", "b" and c" are not prefixes of any other word. So, we can use of first letter of each to represent.

Solution -

class Solution:
    # @param A : list of strings
    # @return a list of strings
    def prefix(self, A):
        tree = [0, {}]  # represents trie root, root[0] represents the number of words having prefix upto this node
                        # root[1] represents the children in the trie.
        # insert every string in the trie.
        for s in A:
            node = tree
            node[0] += 1
            for c in s:
                node = node[1].setdefault(c, [0, {}])
                node[0] += 1
        l = []
        # for every string find the shortest unique prefix.
        for s in A:
            prefix = ''
            node = tree
            for c in s:
                # if the node count = 1, we can stop as there is only one word with this prefix.
                if node[0] <= 1:
                    l.append(prefix)
                    break
                prefix += c
                node = node[1][c]
            else:
                l.append(s)
        return l

##########################################################################################################################

Q3. Contact Finder

Problem Description
We want to make a custom contacts finder applications as part of our college project. The application must perform two types of operations:
Type 1: Add name B[i] ,denoted by 0 in vector A where B[i] is a string in vector B denoting a contact name. This must store B[i] as a new contact in the application.
Type 2: Find partial for B[i] ,denoted by 1 in vector A where B[i] is a string in vector B denoting a partial name to search the application for. It must count the number of contacts starting with B[i].
You have been given sequential add and find operations. You need to perform each operation in order.
And return as an array of integers, answers for each query of type 2(denoted by 1 in A) .

Problem Constraints
1 <= |A| <= 10000
1 <= |length of strings in B| <= 10

Input Format
First argument is the vector A, which denotes the type of query.
Second argument is the vector B, which denotes the string for corresponding query.

Output Format
Return an array of integers, denoting answers for each query of type 1.

Example Input
Input 1:
A = [0, 0, 1, 1]
B = ["hack", "hacker", "hac", "hak"]
Input 2:
A = [0, 1]
B = ["abcde", "abc"]

Example Output
Output 1:
[2, 0]
Output 2:
[1]

Example Explanation
Explanation 1:
We perform the following sequence of operations:
Add a contact named "hack".
Add a contact named "hacker".
Find the number of contact names beginning with "hac". There are currently two contact names in the application and both of them start with "hac", so we have 2.
Find the number of contact names beginning with "hak". There are currently two contact names in the application but neither of them start with "hak", so we get0.
Explanation 2:
Add "abcde"
Find words with prefix "abc". We have answer as 1.

Solution -

from collections import deque

class TrieNode:
    special_character = '$'

    def __init__(self, ch):
        self.children = []
        self.character = ch
        self.counter = 0

    def __cmp__(self, other):
        return self.character == other.character

    def is_word(self):
        for x in self.children:
            if x.character == TrieNode.special_character:
                return True
        return False

    def add(self, word):
        aux_word = word
        node = self
        for ch in aux_word:
            aux_node = None
            for child in node.children:
                if child.character == ch:
                    aux_node = child
                    break
            if aux_node is None:
                aux_node = TrieNode(ch)
                node.children.append(aux_node)
            node = aux_node
            node.counter += 1
        if not node.is_word():
            node.children.append(TrieNode(TrieNode.special_character))

    def find(self, prefix):
        node = self
        for ch in prefix:
            aux_node = None
            for child in node.children:
                if child.character == ch:
                    aux_node = child
                    break
            if aux_node is None:
                return 0
            node = aux_node
        return node.counter

class Solution:
    # @param A : list of integers
    # @param B : list of strings
    # @return a list of integers
    def solve(self, A, B):
        root = TrieNode('')
        n=len(A)
        ans=[]
        for i in range(0,n):
            if(A[i] == 0):
                root.add(B[i])
            else:
                x=root.find(B[i])
                ans.append(x)
        return ans

##########################################################################################################################

Q4. Modified Search

Problem Description
Given two arrays of strings A of size N and B of size M.
Return a binary string C where C[i] = '1' if B[i] can be found in dictionary A using exactly one modification in B[i], Else C[i] = '0'.
NOTE: modification is defined as converting a character into another character.

Problem Constraints
1 <= N <= 30000
1 <= M <= 2500
1 <= length of any string either in A or B <= 20
strings contains only lowercase alphabets

Input Format
First argument is the string arrray A.
Second argument is the string array B.

Output Format
Return a binary string C where C[i] = '1' if B[i] can be found in dictionary A using one modification in B[i], Else C[i] = '0'.

Example Input
Input 1:
A = [data, circle, cricket]
B = [date, circel, crikket, data, circl]
Input 2:
A = [hello, world]
B = [hella, pello, pella]

Example Output
Output 1:
"10100"
Output 2:
"110"

Example Explanation
Explanation 1:
1. date = dat*(can be found in A)
2. circel =(cannot be found in A using exactly one modification)
3. crikket = cri*ket(can be found in A)
4. data = (cannot be found in A using exactly one modification)
5. circl = (cannot be found in A using exactly one modification)
Explanation 2:
Only pella cannot be found in A using only one modification.

Solution -

class TrieNode:
    def __init__(self): 
        self.isEnd = False
        self.child = [None] * 26 
        
def insert(root, word): 
    pCrawl = root 
    for i in range(len(word)): 
        index = ord(word[i]) - ord('a') 
        if pCrawl.child[index] == None: 
            pCrawl.child[index] = TrieNode() 
        pCrawl = pCrawl.child[index] 
    pCrawl.isEnd = True


def query(cur, i, s, flag, last):   
    ans = 0
    n = len(s)
    if(i == n):
        if(flag == 1 and last):
            return 1
        return 0
    c = ord(s[i]) - 97
    if (flag == 0):
        for x in range(26):
            if(cur.child[x] == None):
                continue
            if(x == c):
                ans = ans | query(cur.child[x], i+1, s, flag, cur.child[x].isEnd)
            else:
                ans = ans | query(cur.child[x], i+1, s, 1-flag, cur.child[x].isEnd);
    else:
        if(cur.child[c] != None):
            ans = ans | query(cur.child[c], i+1, s, flag,cur.child[c].isEnd)
    return ans


class Solution:
    # @param A : list of strings
    # @param B : list of strings
    # @return a strings
    def solve(self, A, B):
        root = TrieNode()
        for i in range(len(A)):
            insert(root,A[i])
        ans = ""
        for i in range(len(B)):
            temp = query(root,0,B[i],0,False)
            temp += 48
            ans += chr(temp)
        return ans
