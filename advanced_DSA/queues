Q1. Perfect Numbers

Problem Description
Given an integer A, you have to find the Ath Perfect Number.
A Perfect Number has the following properties:
It comprises only 1 and 2.
The number of digits in a Perfect number is even.
It is a palindrome number.
For example, 11, 22, 112211 are Perfect numbers, where 123, 121, 782, 1 are not.

Problem Constraints
1 <= A <= 100000

Input Format
The only argument given is an integer A.

Output Format
Return a string that denotes the Ath Perfect Number.

Example Input
Input 1:
A = 2
Input 2:
A = 3

Example Output
Output 1:
22
Output 2:
1111

Example Explanation
Explanation 1:
First four perfect numbers are:
1. 11
2. 22
3. 1111
4. 1221
Return the 2nd Perfect number.
Explanation 2:
First four perfect numbers are:
1. 11
2. 22
3. 1111
4. 1221
Return the 3rd Perfect number.

Solution -

class Solution:
# @param A : integer
# @return a strings
    def solve(self, A):
        from queue import Queue
        q = Queue(0)
        q.put("")
        count = 0
        while(count <=A):
            elem = q.get()
            elem1 = elem + '1'
            count += 1
            if count == A:
                return elem1+elem1[::-1]
            else:
                q.put(elem1)
                elem2 = elem + '2'
                count += 1
            if count == A:
                return elem2+elem2[::-1]
            else:
                q.put(elem2)

#########################################################################################################################

Q2. Task Scheduling

Problem Description
A CPU has N tasks to be performed. It is to be noted that the tasks have to be completed in a specific order to avoid deadlock. In every clock cycle, the CPU can either perform a task or move it to the back of the queue. You are given the current state of the scheduler queue in array A and the required order of the tasks in array B.
Determine the minimum number of clock cycles to complete all the tasks.

Problem Constraints
1 <= N <= 1000
1 <= A[i], B[i] <= N

Input Format
First argument consist of integer array A.
Second argument consist of integer array B.

Output Format
Return an integer denoting the minimum number of clock cycles required to complete all the tasks.

Example Input
Input 1:
A = [2, 3, 1, 5, 4]
B = [1, 3, 5, 4, 2]
Input 2:
A = [1]
B = [1]

Example Output
Output 1:
10
Output 2:
1

Example Explanation
Explanation 1:
According to the order array B task 1 has to be performed first, so the CPU will move tasks 2 and 3 to the end of the queue (in 2 clock cycles).
Total clock cycles till now = 2
Now CPU will perform task 1.
Total clock cycles till now = 3
Now, queue becomes [5, 4, 2, 3]
Now, CPU has to perform task 3. So it moves tasks 5, 4, and 2 to the back one-by-one.
Total clock cycles till now = 6
Now all the tasks in the queue are as in the required order so the CPU will perform them one-by-one.
Total clock cycles = 10
Explanation 2:
Directly task 1 is completed.

Solution -

from collections import deque

class Solution:
    # @param A : list of integers
    # @param B : list of integers
    # @return an integer
    def solve(self, A, B):
        # BruteForce
        A = deque(A)
        B = deque(B)
        count = 0
        while B:
            ele1 = A.popleft()
            ele2 = B[0]
            if ele1 != ele2:
                A.append(ele1)
            else:
                B.popleft()
            count += 1

        return count
#########################################################################################################################

Q3. N integers containing only 1, 2 & 3

Problem Description
Given an integer, A. Find and Return first positive A integers in ascending order containing only digits 1, 2, and 3.
NOTE: All the A integers will fit in 32-bit integers.

Problem Constraints
1 <= A <= 29500

Input Format
The only argument given is integer A.

Output Format
Return an integer array denoting the first positive A integers in ascending order containing only digits 1, 2 and 3.

Example Input
Input 1:
A = 3
Input 2:
A = 7

Example Output
Output 1:
[1, 2, 3]
Output 2:
[1, 2, 3, 11, 12, 13, 21]

Example Explanation
Explanation 1:
Output denotes the first 3 integers that contains only digits 1, 2 and 3.
Explanation 2:
Output denotes the first 7 integers that contains only digits 1, 2 and 3.

Solution -

from collections import deque
class Solution:
    # @param A : integer
    # @return a list of integers
    def solve(self, A):
        ans = []
        q = deque()
        q.append(1)
        q.append(2)
        q.append(3)

        s = 0
        while A > 0:
            s = q.popleft()
            ans.append(s)
            for i in range(1, 4):
                val = (s * 10) + i
                q.append(val)
            A -= 1

        return ans

#########################################################################################################################

Q4. Reversing Elements Of Queue

Problem Description
Given an array of integers A and an integer B, we need to reverse the order of the first B elements of the array, 
leaving the other elements in the same relative order. 
NOTE: You are required to the first insert elements into an auxiliary queue then perform Reversal of first B elements.

Problem Constraints
1 <= B <= length of the array <= 500000
1 <= A[i] <= 100000

Input Format
The argument given is the integer array A and an integer B.

Output Format
Return an array of integer after reversing the first B elements of A using queue.

Example Input
Input 1:
A = [1, 2, 3, 4, 5]
B = 3
Input 2:
A = [5, 17, 100, 11]
B = 2

Example Output
Output 1:
[3, 2, 1, 4, 5]
Output 2:
[17, 5, 100, 11]

Example Explanation
Explanation 1:
Reverse first 3 elements so the array becomes [3, 2, 1, 4, 5]
Explanation 2:
 Reverse first 2 elements so the array becomes [17, 5, 100, 11]

Solution -

from collections import deque
class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return a list of integers
    def solve(self, A, B):
        que = deque()
        for i in range(B):
            que.appendleft(A[i])

        ans = []
        while len(que)>0:
            v = que.popleft()
            ans.append(v)
        n = len(A)
        for i in range(B,n):
            ans.append(A[i])
        return ans    

#########################################################################################################################

Q5. N integers containing only 1, 2 & 3

Problem Description
Given an integer, A. Find and Return first positive A integers in ascending order containing only digits 1, 2, and 3.
NOTE: All the A integers will fit in 32-bit integers.

Problem Constraints
1 <= A <= 29500

Input Format
The only argument given is integer A.

Output Format
Return an integer array denoting the first positive A integers in ascending order containing only digits 1, 2 and 3.

Example Input
Input 1:
A = 3
Input 2:
A = 7

Example Output
Output 1:
[1, 2, 3]
Output 2:
[1, 2, 3, 11, 12, 13, 21]

Example Explanation
Explanation 1:
Output denotes the first 3 integers that contains only digits 1, 2 and 3.
Explanation 2:
Output denotes the first 7 integers that contains only digits 1, 2 and 3.

Solution -

from collections import deque
class Solution:
    # @param A : integer
    # @return a list of integers
    def solve(self, A):
        dq = deque()
        dq.append("1")
        dq.append("2")
        dq.append("3")

        ans = []
        while len(ans)<A:
            a = dq.popleft()
            ans.append(int(a))
            dq.append(a+"1")
            dq.append(a+"2")
            dq.append(a+"3")
        return ans
#########################################################################################################################

Q6. Unique Letter

Problem Description
Imagine you're a teacher. You ask students to call out a letter one by one. After each letter, you jot down the very first letter that's only been called out once. If all letters have been repeated, you write "#".
Here's a scenario:
A student says "a". It's the first letter. You write "a".
Next, a student says "b", "a" is still unique, so you add "a". Now it's "aa".
A student says "a" again. Now, "b" is the unique one. You add "b", making it "aab".
A student says "b". All letters so far are repeated. You add "#". It becomes "aab#".
A student says "c". "c" is unique. You add "c". The final is "aab#c".
Your task? Given the sequence the students call out A, determine the string on the board.

Problem Constraints
1 <= |A| <= 100000

Input Format
The only argument given is string A.

Output Format
Return a string after processing the stream of lowercase alphabets A.

Example Input
Input 1:
 A = "abadbc"
Input 2:
A = "abcabc"

Example Output
Output 1:
"aabbdd"
Output 2:
"aaabc#"

Example Explanation
Explanation 1:
"a"      -   first non repeating character 'a'
"ab"     -   first non repeating character 'a'
"aba"    -   first non repeating character 'b'
"abad"   -   first non repeating character 'b'
"abadb"  -   first non repeating character 'd'
"abadbc" -   first non repeating character 'd'
Explanation 2:
"a"      -   first non repeating character 'a'
"ab"     -   first non repeating character 'a'
"abc"    -   first non repeating character 'a'
"abca"   -   first non repeating character 'b'
"abcab"  -   first non repeating character 'c'
"abcabc" -   no non repeating character so '#'

Solution -

from collections import OrderedDict
class Solution:
    # @param A : string
    # @return a strings
    def solve(self, A):
        ans = ""
        d = OrderedDict()
        for i in A:
            if i not in d:
                d[i] = 1
            else:
                d[i]+=1
            for key, value in d.items():
                if value == 1:
                    ans+=key
                    break
            flag=True
            for key, value in d.items():
                if value > 1:
                    pass
                else:
                    flag=False
            if flag==True:
                ans+='#'
        return ans                

#########################################################################################################################

Q7. Parking Ice Cream Truck

Problem Description
Imagine you're an ice cream truck driver in a beachside town. The beach is divided into several sections, and each section has varying numbers of beachgoers wanting ice cream given by the array of integers A.
For simplicity, let's say the beach is divided into 8 sections. One day, you note down the number of potential customers in each section: [5, 12, 3, 4, 8, 10, 2, 7]. This means there are 5 people in the first section, 12 in the second, and so on.
You can only stop your truck in B consecutive sections at a time because of parking restrictions. To maximize sales, you want to park where the most customers are clustered together.
For all B consecutive sections, identify the busiest stretch to park your ice cream truck and serve the most customers. Return an array C, where C[i] is the busiest section in each of the B consecutive sections. Refer to the given example for clarity.
NOTE: If B > length of the array, return 1 element with the max of the array.

Problem Constraints
1 <= |A|, B <= 106

Input Format
The first argument given is the integer array A.
The second argument given is the integer B.

Output Format
Return an array C, where C[i] is the maximum value from A[i] to A[i+B-1].

Example Input
Input 1:
A = [1, 3, -1, -3, 5, 3, 6, 7]
B = 3
Input 2:
A = [1, 2, 3, 4, 2, 7, 1, 3, 6]
B = 6

Example Output
Output 1:
[3, 3, 5, 5, 6, 7]
Output 2:
[7, 7, 7, 7]

Example Explanation
Explanation 1:

 Window position     | Max
 --------------------|-------
 [1 3 -1] -3 5 3 6 7 | 3
 1 [3 -1 -3] 5 3 6 7 | 3
 1 3 [-1 -3 5] 3 6 7 | 5
 1 3 -1 [-3 5 3] 6 7 | 5
 1 3 -1 -3 [5 3 6] 7 | 6
 1 3 -1 -3 5 [3 6 7] | 7
Explanation 2:

 Window position     | Max
 --------------------|-------
 [1 2 3 4 2 7] 1 3 6 | 7
 1 [2 3 4 2 7 1] 3 6 | 7
 1 2 [3 4 2 7 1 3] 6 | 7
 1 2 3 [4 2 7 1 3 6] | 7

Solution -

from collections import deque
class Solution:
	# @param A : tuple of integers
	# @param B : integer
	# @return a list of integers
	def slidingMaximum(self, A, B):
        q = deque()
        N = len(A)

        if N == 1: return [A[0]]

        ans = []
        for i in range(B):
            cur_ele = A[i]
            while q and cur_ele > q[-1]: 
                q.pop()
            q.append(cur_ele) 
            
        for i in range(N-B):
            out_gn = A[i]
            if out_gn == q[0]:
                ele = q.popleft()
                ans.append(ele)
            else:
                ans.append(q[0])

            in_cmg = A[i+B]
            while q and in_cmg > q[-1]:
                q.pop()

            q.append(in_cmg)

        if q: 
            ans.append(q.popleft())   
        return ans 

#########################################################################################################################

Q8. Min Stack

Problem Description
Design a stack that supports push, pop, top, and retrieve the minimum element in constant time.
push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
NOTE:
All the operations have to be constant time operations.
getMin() should return -1 if the stack is empty.
pop() should return nothing if the stack is empty.
top() should return -1 if the stack is empty.

Problem Constraints
1 <= Number of Function calls <= 107

Input Format
Functions will be called by the checker code automatically.

Output Format
Each function should return the values as defined by the problem statement.

Example Input
Input 1:
push(1)
push(2)
push(-2)
getMin()
pop()
getMin()
top()
Input 2:
getMin()
pop()
top()

Example Output
Output 1:
-2 1 2
Output 2:
-1 -1

Example Explanation
Explanation 1:
Let the initial stack be : []
1) push(1) : [1]
2) push(2) : [1, 2]
3) push(-2) : [1, 2, -2]
4) getMin() : Returns -2 as the minimum element in the stack is -2.
5) pop() : Return -2 as -2 is the topmost element in the stack.
6) getMin() : Returns 1 as the minimum element in stack is 1.
7) top() : Return 2 as 2 is the topmost element in the stack.
Explanation 2:
Let the initial stack be : []
1) getMin() : Returns -1 as the stack is empty.
2) pop() :  Returns nothing as the stack is empty.
3) top() : Returns -1 as the stack is empty.

Solution -

class MinStack:
    # @param x, an integer
    # @return an integer
    def __init__(self):
        self.stk = []
        self.mnstk = []


    def push(self, x):
        if len(self.stk) == 0:
            self.stk.append(x)
            self.mnstk.append(x)
       
        else:
            self.stk.append(x)
            if x <= self.mnstk[-1]:
                self.mnstk.append(x)
       
    # @return nothing
    def pop(self):
        if len(self.stk) > 0:
            val = self.stk.pop()
            if val == self.mnstk[-1]:
                self.mnstk.pop()
        else:
            return

    # @return an integer
    def top(self):
        if len(self.stk) > 0:
            return self.stk[-1]
        else:
            return -1
       

    # @return an integer
    def getMin(self):
        if len(self.mnstk) > 0:
            return self.mnstk[-1]
        else:
            return -1

#########################################################################################################################

Q9. Sum of min and max

Problem Description
Given an array A of both positive and negative integers.
Your task is to compute the sum of minimum and maximum elements of all sub-array of size B.
NOTE: Since the answer can be very large, you are required to return the sum modulo 109 + 7.

Problem Constraints
1 <= size of array A <= 105
-109 <= A[i] <= 109
1 <= B <= size of array

Input Format
The first argument denotes the integer array A.
The second argument denotes the value B

Output Format
Return an integer that denotes the required value.

Example Input
Input 1:
A = [2, 5, -1, 7, -3, -1, -2]
B = 4
Input 2:
A = [2, -1, 3]
B = 2

Example Output
Output 1:
18
Output 2:
3

Example Explanation
Explanation 1:
Subarrays of size 4 are : 
  [2, 5, -1, 7],   min + max = -1 + 7 = 6
  [5, -1, 7, -3],  min + max = -3 + 7 = 4      
  [-1, 7, -3, -1], min + max = -3 + 7 = 4
  [7, -3, -1, -2], min + max = -3 + 7 = 4   
  Sum of all min & max = 6 + 4 + 4 + 4 = 18 
Explanation 2:
Subarrays of size 2 are : 
  [2, -1],   min + max = -1 + 2 = 1
  [-1, 3],   min + max = -1 + 3 = 2
  Sum of all min & max = 1 + 2 = 3 

Solution -

from collections import deque

class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        N=len(A)
        max_dq = deque()
        min_dq = deque()
        ans = 0
        mod = 10 ** 9 + 7

        for i in range(N):
           
            # remove elements from the front of the deque that are outside the current window
            while max_dq and max_dq[0] < i - B + 1:
                max_dq.popleft()
            while min_dq and min_dq[0] < i - B + 1:
                min_dq.popleft()

            # remove elements from the max deque that are smaller than the current element
            while max_dq and A[max_dq[-1]] < A[i]:
                max_dq.pop()

            # remove elements from the min deque that are larger than the current element
            while min_dq and A[min_dq[-1]] > A[i]:
                min_dq.pop()

            # add the current element index to both deques
            max_dq.append(i)
            min_dq.append(i)

            # add the maximum and minimum elements of the current window to the answer
           
            if i >= B - 1:
                ans = ( ans + A[max_dq[0]] + A[min_dq[0]] ) % mod
        return ans
