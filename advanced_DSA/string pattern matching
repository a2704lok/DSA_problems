Q1. Cyclic Permutations

Problem Description
Given two binary strings A and B, count how many cyclic shift of B when taken XOR with A give 0.
NOTE: If there is a string, S0, S1, ... Sn-1 , then it is a cyclic shift is of the form Sk, Sk+1, ... Sn-1, S0, S1, ... Sk-1 where k can be any integer from 0 to N-1.

Problem Constraints
1 ≤ length(A) = length(B) ≤ 105

Input Format
The first argument is a string A.
The second argument is a string B.

Output Format
Return an integer denoting the required answer.

Example Input
Input 1:
A = "1001"
B = "0011"
Input 2:
A = "111"
B = "111"

Example Output
Output 1:
1
Output 2:
3

Example Explanation
Explanation 1:
4 cyclic shifts of B exists: "0011", "0110", "1100", "1001".  
There is only one cyclic shift of B i.e. "1001" which has 0 xor with A.
Explanation 2:
All cyclic shifts of B are same as A and give 0 when taken xor with A. So, the ans is 3.

Solution -

class Solution:
    # @param A : string
    # @param B : string
    # @return an integer
    def solve(self, A, B):
        x = B+B
        s = 0
        e = len(B)
        c = 0
        while e<len(x):
            if x[s:e] == A:
                c+=1
            s+=1
            e+=1
        return c        
                   
########################################################################################################################

Q2. Hidden Pattern

Problem Description
Given two strings - a text A and a pattern B, having lower-case alphabetic characters. You have to determine the number of occurrences of pattern B in text A as its substring. i.e. the number of times B occurs as a substring in A.

Problem Constraints
1 <= |B| <= |A| <= 105

Input Format
First argument is a string A
Second argument is a string B

Output Format
Return the number of occurrences.

Example Input
Input 1:
A = "abababa"
B = "aba" 
Input 2:
A = "mississipi"
B = "ss" 
Input 3:
A = "hello" 
B = "hi" 

Example Output
Output 1:
3 
Output 2:
2 
Output 3:
0 

Example Explanation
Explanation 1:
A has 3 substrings equal to B - A[1, 3], A[3, 5] and A[5, 7] 
Explanation 2:
B occurs two times in A - A[3, 4], A[6, 7]. 
Explanation 3:
B does not occur in A as a substring.

Solution -

class Solution:
    # @param A : string
    # @param B : string
    # @return an integer
    def solve(self, A, B):
        s = B+"_"+A
        n = len(s)
        # j = 0
        lps = [0]*n

        for i in range(1,n):
            x = lps[i-1]
	        while s[i] != s[x]:
                if x == 0:
                    x = -1
                    break
                x = lps[x-1]
            lps[i] = x+1
                   
        ans = 0
        m = len(B)
        for i in lps:
            if i == m:
                ans+=1
        return ans        
        
########################################################################################################################

Q3. Make String Palindrome

Problem Description
Given a string A of size N consisting only of lowercase alphabets. The only operation allowed is to insert characters in the beginning of the string.
Find and return how many minimum characters are needed to be inserted to make the string a palindrome string.

Problem Constraints
1 <= N <= 106

Input Format
The only argument given is a string A.

Output Format
Return an integer denoting the minimum characters needed to be inserted in the beginning to make the string a palindrome string.

Example Input
Input 1:
A = "abc"
Input 2:
A = "bb"
Example Output
Output 1:
2
Output 2:
0

Example Explanation
Explanation 1:
Insert 'b' at beginning, string becomes: "babc".
Insert 'c' at beginning, string becomes: "cbabc".
Explanation 2:
There is no need to insert any character at the beginning as the string is already a palindrome.

Solution -

class Solution:
    # @param A : string
    # @return an integer
    def solve(self, A):
        concat = A + '-' + A[::-1]
        n = len(concat)
        lps = [0] * n

        i, j = 0, 1

        while j < n:
            if concat[i] == concat[j]:
                lps[j] = i + 1
                i += 1
                j += 1

            else:
                if i != 0:
                    i = lps[i - 1]

                else:
                    lps[j] = 0
                    j += 1

        return len(A) - lps[-1]
 or 

 class Solution:
    # @param A : string
    # @return an integer
    def solve(self, A):
        n = len(A)
        l, r = 0, n - 1

        ans = 0 

        while l < r:
            if A[l] == A[r]:
                l += 1
                r -= 1

            else:
                l = 0
                ans = n - r

                while A[l] == A[r]:
                    ans -= 1
                    l += 1

                r -= 1

        return ans

########################################################################################################################

Q4. Smallest Prefix String

Problem Description
Given 2 strings A and B of size N and M respectively consisting of lowercase alphabets, find the lexicographically smallest string that can be formed by concatenating non-empty prefixes of A and B (in that order).
Note: The answer string has to start with a non-empty prefix of string A followed by a non-empty prefix of string B.

Problem Constraints
1 <= N, M <= 100000

Input Format
The first argument is a string A of size N.
The second argument is a string B of size M.

Output Format
Return lexicographically smallest string that can be formed by concatenating non-empty prefixes of A and B (in that order).

Example Input
Input 1:
A = "abba"
B = "cdd"
Input 2:
A = "acd"
B = "bay"

Example Output
Output 1:
"abbac"
Output 2:
"ab"

Example Explanation
Explanation 1:
We can concatenate prefix of A i.e "abba" and prefix of B i.e "c".
The lexicographically smallest string will be "abbac".
Explanation 2:
We can concatenate prefix of A i.e "a" and prefix of B i.e "b".
The lexicographically smallest string will be "ab".

Solution -

class Solution:
    # @param A : string
    # @param B : string
    # @return a strings
    def smallestPrefix(self, A, B):
        str1 = ''
        for i in range(1,len(A)):
            if ord(A[i]) < ord(B[0]):
                str1+=A[i]
            else:
                break

        return A[0]+str1+B[0]

########################################################################################################################

Q5. Closest Palindrome

Problem Description
Groot has a profound love for palindrome which is why he keeps fooling around with strings.
A palindrome string is one that reads the same backward as well as forward.
Given a string A of size N consisting of lowercase alphabets, he wants to know if it is possible to make the given string a palindrome by changing exactly one of its character.

Problem Constraints
1 <= N <= 105

Input Format
The first and only argument is a string A.

Output Format
Return the string YES if it is possible to make the given string a palindrome by changing exactly 1 character. Else, it should return the string NO.

Example Input
Input 1:
A = "abbba"
Input 2:
A = "adaddb"

Example Output
Output 1:
"YES"
Output 2:
"NO"

Example Explanation
Explanation 1:
We can change the character at index 3(1-based) to any other character. The string will be palindromic.
Explanation 2:
To make the string palindromic we need to change 2 characters. 

Solution -

class Solution:
    # @param A : string
    # @return a strings
    def solve(self, A):
        n = len(A)
        i = 0
        j = n-1
        c = 0
        while i < j:
            if A[i] != A[j]:
                c+=1
            i+=1
            j-=1

        if c > 1:
            return "NO"
        if c == 1:
            return "YES"
        if c == 0:
            if n%2 == 1:
                return "YES"
            else:
                return "NO"        

########################################################################################################################

Q6. Period of a string

Problem Description
You are given a string A of length N consisting of lowercase alphabets. Find the period of the string.
Period of the string is the minimum value of k (k >= 1), that satisfies A[i] = A[i % k] for all valid i.

Problem Constraints
1 <= N <= 106

Input Format
First and only argument is a string A of length N.

Output Format
Return an integer, denoting the period of the string.

Example Input
Input 1:
A = "abababab"
Input 2:
A = "aaaa"

Example Output
Output 1:
2
Output 2:
1

Example Explanation
Explanation 1:
Period of the string will be 2: 
Since, for all i, A[i] = A[i%2]. 
Explanation 2:
Period of the string will be 1.

Solution -

class Solution:
    # @param A : string
    # @return an integer
    def Compute_lps(self,string):
        m=len(string)
        lps=[0]*m
        j=1
        i=0
        lps[0]=0
        while j<m:
            if string[i]==string[j]:
                i+=1
                lps[j]=i
                j+=1
            else:
                if i!=0:
                    i=lps[i-1]
                else:
                    lps[j]=0
                    j+=1
        return lps
    def solve(self, A):
        lps=self.Compute_lps(A)
        if lps[len(A)-1]==0:
            return len(A)
        return len(A)-max(lps)
