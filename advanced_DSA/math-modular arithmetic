Q1. Rearrange Array

Given an array A of size N. Rearrange the given array so that A[i] becomes A[A[i]] with O(1) extra space.

Constraints:
1 <= N <= 5Ã—104
0 <= A[i] <= N - 1

The elements of A are distinct

Input Format
The argument A is an array of integers

Example 1:
Input : [1, 0]
Return : [0, 1]

Example 2:
Input : [0, 2, 1, 3]
Return : [0, 1, 2, 3]

Solution -

class Solution:
    # @param A : list of integers
    # Modify the array A which is passed by reference. 
    # You do not need to return anything in this case. 
    def arrange(self, A):
        n = len(A)
        for i in range(n):
            A[i] = A[i]*n
        for i in range(n):
            A[i] += int(A[int(A[i]/n)]/n)
        for i in range(n):
            A[i] = A[i]%n

        return A

#######################################################################################################################

Q2. A, B and Modulo

Problem Description
Given two integers A and B, find the greatest possible positive integer M, such that A % M = B % M.

Problem Constraints
1 <= A, B <= 109
A != B

Input Format
The first argument is an integer A.
The second argument is an integer B.

Output Format
Return an integer denoting the greatest possible positive M.

Example Input
Input 1:
A = 1
B = 2
Input 2:
A = 5
B = 10

Example Output
Output 1:
1
Output 2:
5

Example Explanation
Explanation 1:
1 is the largest value of M such that A % M == B % M.
Explanation 2:
For M = 5, A % M = 0 and B % M = 0.
No value greater than M = 5, satisfies the condition.

Solution -

class Solution:
    # @param A : integer
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        return abs(A-B)

#######################################################################################################################

Q3. Implement Power Function

Problem Description
Implement pow(A, B) % C.
In other words, given A, B and C, Find (AB % C).
Note: The remainders on division cannot be negative. In other words, make sure the answer you return is non-negative.

Problem Constraints
-109 <= A <= 109
0 <= B <= 109
1 <= C <= 109

Input Format
Given three integers A, B, C.

Output Format
Return an integer.

Example Input
Input 1:
A = 2
B = 3
C = 3
Input 2:
A = 3
B = 3
C = 1

Example Output
Output 1:
2
Output 2:
0

Example Explanation
Explanation 1:
23 % 3 = 8 % 3 = 2
Explanation 2:
33 % 1 = 27 % 1 = 0

Solution -

class Solution:
    # @param A : integer
    # @param B : integer
    # @param C : integer
    # @return an integer
    def pow(self, A, B, C):
        return Solution.calculateExponent(A,B,C)
        
    def calculateExponent(base,power,mod):
        if power == 0:
            return 1 % mod

        if power == 1:
            return base % mod

        exponent = (Solution.calculateExponent(base, power//2, mod)) % mod

        if power % 2 == 0:
            return (exponent * exponent) % mod
        else:
            return ((exponent * exponent) % mod * base ) % mod

#######################################################################################################################

Q4. Prime Modulo Inverse

Problem Description
Given two integers A and B. Find the value of A-1 mod B where B is a prime number and gcd(A, B) = 1.
A-1 mod B is also known as modular multiplicative inverse of A under modulo B.

Problem Constraints
1 <= A <= 109
1<= B <= 109
B is a prime number

Input Format
First argument is an integer A.
Second argument is an integer B.

Output Format
Return an integer denoting the modulor inverse

Example Input
Input 1:
A = 3
B = 5
Input 2:
A = 6
B = 23

Example Output
Output 1:
2
Output 2:
4

Example Explanation
Explanation 1:
Let's say A-1 mod B = X, then (A * X) % B = 1.
3 * 2 = 6, 6 % 5 = 1.
Explanation 2:
Similarly, (6 * 4) % 23 = 1.

Solution -

import math
class Solution:
    # @param A : integer
    # @param B : integer
    # @return an integer
    def power(self,A,B,M):
        if B==0:
            return 1
        c=self.power(A,B//2,M)
        if B%2==0:
            return ((c *c)%M)
        else:
            return ((A*c*c)%M)

    def solve(self, A, B):
        ans=Solution.power(self,A,B-2,B)
        return ans
