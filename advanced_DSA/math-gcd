Q1. Delete one

Problem Description
Given an integer array A of size N. You have to delete one element such that the GCD(Greatest common divisor) of the remaining array is maximum.
Find the maximum value of GCD.

Problem Constraints
2 <= N <= 105
1 <= A[i] <= 109

Input Format
First argument is an integer array A.

Output Format
Return an integer denoting the maximum value of GCD.

Example Input
Input 1:
A = [12, 15, 18]
Input 2:
A = [5, 15, 30]

Example Output
Output 1:
6
Output 2:
15

Example Explanation
Explanation 1:
If you delete 12, gcd will be 3.
If you delete 15, gcd will be 6.
If you delete 18, gcd will 3.
Maximum value of gcd is 6.
Explanation 2:
If you delete 5, gcd will be 15.
If you delete 15, gcd will be 5.
If you delete 30, gcd will be 5.
Maximum value of gcd is 15.

Solution -

class Solution:
    # @param A : list of integers
    # @return an integer
    def gcd(x,y):
        if y == 0:
            return x
        return Solution.gcd(y,x%y)

    def solve(self, A):
        pfgcd = []
        sfgcd = []
        n = len(A)
        ans = 0
        for i in range(n):
            ans = Solution.gcd(ans,A[i])
            pfgcd.append(ans)

        ans = 0
        for i in range(n-1,-1,-1):
            ans = Solution.gcd(ans,A[i])
            sfgcd.append(ans)

        sfgcd = sfgcd[::-1]

        ans = float('-inf')

        for i in range(n):
            if i == 0:
                value = sfgcd[1]
            elif i == n-1:
                value = pfgcd[n-2]
            else:
                value = Solution.gcd(pfgcd[i-1],sfgcd[i+1])

            ans = max(ans,value)

        return ans

#######################################################################################################################

Q2. Enumerating GCD

Problem Description
You are given a number A and a number B. Greatest Common Divisor (GCD) of all numbers between A and B inclusive is taken (GCD(A, A+1, A+2 ... B)).
As this problem looks a bit easy, it is given that numbers A and B can be in the range of 10100.
You have to return the value of GCD found.
The greatest common divisor of 2 numbers, A and B, is the largest number, D that divides both A and B perfectly.

Problem Constraints
1 <= A <= B <= 10100

Input Format
First argument is a string denoting A.
Second argument is a string denoting B.

Output Format
Return a string which contains the digits of the integer which represents the GCD. The returned string should not have any leading zeroes.

Example Input
A = "1"
B = "3"

Example Output
1

Example Explanation
Greatest divisor that divides both 1 and 3 is 1.

Solution -

class Solution:
    # @param A : string
    # @param B : string
    # @return a strings

        
    def solve(self, A, B):
        if A == B:
            return A
        return "1"

#######################################################################################################################

Q3. Greatest Common Divisor

Problem Description
Given 2 non-negative integers A and B, find gcd(A, B)
GCD of 2 integers A and B is defined as the greatest integer 'g' such that 'g' is a divisor of both A and B. Both A and B fit in a 32 bit signed integer.
Note: DO NOT USE LIBRARY FUNCTIONS.

Problem Constraints
0 <= A, B <= 109

Input Format
First argument is an integer A.
Second argument is an integer B.

Output Format
Return an integer denoting the gcd(A, B).

Example Input
Input 1:
A = 4
B = 6
Input 2:
A = 6
B = 7

Example Output
Output 1:
 2
Output 2:
 1

Example Explanation
Explanation 1:
 2 divides both 4 and 6
Explanation 2:
1 divides both 6 and 7

Solution - 

class Solution:
    # @param A : integer
    # @param B : integer
    # @return an integer
    def gcd(self, A, B):
        if B == 0:
            return A
        return Solution.gcd(self,B,A%B)    

#######################################################################################################################

Q4. Pubg

Problem Description
There are N players, each with strength A[i]. when player i attack player j, player j strength reduces to max(0, A[j]-A[i]). When a player's strength reaches zero, it loses the game, and the game continues in the same manner among other players until only 1 survivor remains.
Can you tell the minimum health last surviving person can have?

Problem Constraints
1 <= N <= 100000
1 <= A[i] <= 1000000

Input Format
First and only argument of input contains a single integer array A.

Output Format
Return a single integer denoting minimum health of last person.

Example Input
Input 1:
A = [6, 4]
Input 2:
A = [2, 3, 4]

Example Output
Output 1:
2
Output 2:
1

Example Explanation
Explanation 1:
Given strength array A = [6, 4]
Second player attack first player, A =  [2, 4]
First player attack second player twice. [2, 0]
Explanation 2:
Given strength array A = [2, 3, 4]
First player attack third player twice. [2, 3, 0]
First player attack second player. [2, 1, 0]
Second player attack first player twice. [0, 1, 0]

Solution -

class Solution:
    # @param A : list of integers
    # @return an integer
    def gcd(x,y):
        if y == 0:
            return x
        return Solution.gcd(y,x%y)

    def solve(self, A):
        n = len(A)
        ans = A[0]
        for i in range(n):
            ans = Solution.gcd(ans,A[i])

        return ans

#######################################################################################################################

Q5. Largest Coprime Divisor

Problem Description
You are given two positive numbers A and B . You need to find the maximum valued integer X such that:
X divides A i.e. A % X = 0
X and B are co-prime i.e. gcd(X, B) = 1

Problem Constraints
1 <= A, B <= 109

Input Format
First argument is an integer A.
Second argument is an integer B.

Output Format
Return an integer maximum value of X as descibed above.

Example Input
Input 1:
A = 30
B = 12
Input 2:
A = 5
B = 10

Example Output
Output 1:
5
Output 2:
1

Example Explanation
Explanation 1:
All divisors of A are (1, 2, 3, 5, 6, 10, 15, 30). 
The maximum value is 5 such that A%5 == 0 and gcd(5,12) = 1
Explanation 2:
1 is the only value such that A%5 == 0 and gcd(1,10) = 1

Solution -

class Solution:
	# @param A : integer
	# @param B : integer
	# @return an integer
    def gcd(x,y):
        if y == 0:
            return x
        return Solution.gcd(y,x%y)

	def cpFact(self, A, B):
        if Solution.gcd(A,B) == 1:
            return A
        while Solution.gcd(A,B) != 1:
            A = A/Solution.gcd(A,B)
        return int(A)
        
#######################################################################################################################

Q6. Divisor game

Problem Description
Scooby has 3 three integers A, B, and C.
Scooby calls a positive integer special if it is divisible by B and it is divisible by C. You need to tell the number of special integers less than or equal to A.

Problem Constraints
1 <= A, B, C <= 109

Input Format
First argument is a positive integer A
Second argument is a positive integer B
Third argument is a positive integer C

Output Format
One integer corresponding to the number of special integers less than or equal to A.

Example Input
Input 1:

A = 12
B = 3
C = 2
Input 2:
A = 6
B = 1
C = 4

Example Output
Output 1:
2
Output 2:
1

Example Explanation
Explanation 1:
The two integers divisible by 2 and 3 and less than or equal to 12 are 6,12.
Explanation 2:
Only 4 is a positive integer less than equal to 6 which is divisible by 1 and 4.

Solution -

class Solution:
    # @param A : integer
    # @param B : integer
    # @param C : integer
    # @return an integer
    def gcd(x,y):
        if y == 0:
            return x
        return Solution.gcd(y,x%y)

    def solve(self, A, B, C):
        hcf = Solution.gcd(B,C)
        lcm = (B*C)/hcf
        ans = A//lcm 
        return int(ans)   
